package br.ufrn.sigaa.ensino.tecnico.dominio;

// Generated 13/09/2006 08:49:22 by Hibernate Tools 3.1.0.beta5

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import br.ufrn.arq.dominio.RegistroEntrada;
import br.ufrn.arq.negocio.validacao.ListaMensagens;
import br.ufrn.arq.negocio.validacao.Validatable;
import br.ufrn.arq.seguranca.log.AtualizadoEm;
import br.ufrn.arq.seguranca.log.AtualizadoPor;
import br.ufrn.arq.seguranca.log.CriadoEm;
import br.ufrn.arq.seguranca.log.CriadoPor;
import br.ufrn.arq.util.ValidatorUtil;
import br.ufrn.sigaa.dominio.Unidade;
import br.ufrn.sigaa.ensino.dominio.ComponenteCurricular;


/**
 * Representa um conjunto de disciplinas que irão compor
 * uma estrutura curricular
 * Modulo generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "modulo", schema = "tecnico", uniqueConstraints = {})
public class Modulo implements Validatable {

	/** Chave primária. */
	@Id
	@GeneratedValue(generator="seqGenerator")
	@GenericGenerator(name="seqGenerator", strategy="br.ufrn.arq.dao.SequenceStyleGenerator",
	          parameters={ @Parameter(name="sequence_name", value="public.hibernate_sequence") }) 
	@Column(name = "id_modulo", unique = true, nullable = false, insertable = true, updatable = true)
	private int id;

	/** Indica o código do Módulo. */
	@Column(name = "codigo", unique = false, nullable = true, insertable = true, updatable = true, length = 7)
	private String codigo;

	/** Descrição do Módulo. */
	@Column(name = "descricao", unique = false, nullable = true, insertable = true, updatable = true, length = 40)
	private String descricao;

	/** Indica a carga horária do Módulo. */
	@Column(name = "carga_horaria", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer cargaHoraria;

	/** Indica o nível do Módulo. */
	@Column(name = "nivel", unique = false, nullable = false, insertable = true, updatable = true)
	private char nivel;

	/** Relacionamento entre o Módulo e a Disciplina. */
	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY, mappedBy = "modulo")
	private Set<ModuloDisciplina> moduloDisciplinas = new HashSet<ModuloDisciplina>(0);

	/** Relacionamento entre o Módulo e a Estrutura Curricular. */
	@OneToMany(cascade = { }, fetch = FetchType.LAZY, mappedBy = "modulo")
	private Set<ModuloCurricular> moduloCurriculares = new HashSet<ModuloCurricular>(0);

	/** Relacionamento entre o Módulo e a Qualificação. */
	@OneToMany(cascade = { }, fetch = FetchType.LAZY, mappedBy = "modulo")
	private Set<ModuloQualificacao> moduloQualificacoes = new HashSet<ModuloQualificacao>(0);

	/** Indica a Unidade na qual o Módulo está vínculado. */
	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "id_unidade", unique = false, nullable = true, insertable = true, updatable = true)
	private Unidade unidade = new Unidade();
	
	/** Associação de {@link Modulo} com {@link ComponenteCurricular} . */
	@Transient
	private ModuloDisciplina moduloDisciplina = new ModuloDisciplina();
	
	/** Data de cadastro do Módulo. */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_cadastro")
	@CriadoEm
	private Date dataCadastro;

	/** Registro entrada do usuário que cadastrou. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_registro_cadastro")
	@CriadoPor
	private RegistroEntrada registroCadastro;

	/** Data da última atualização do Módulo. */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_atualizacao")
	@AtualizadoEm
	private Date dataAtualizacao;

	/** Registro entrada do usuário que realizou a última atualização. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_registro_atualizacao")
	@AtualizadoPor
	private RegistroEntrada registroAtualizacao;
	
	// Constructors	

	/** default constructor */
	public Modulo() {
	}

	/** minimal constructor */
	public Modulo(int idModulo) {
		this.id = idModulo;
	}

	/** full constructor */
	public Modulo(int idModulo,
			EstruturaCurricularTecnica estruturaCurricularTecnica,
			String descricao, Integer cargaHoraria) {
		this.id = idModulo;
		this.descricao = descricao;
		this.cargaHoraria = cargaHoraria;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int idModulo) {
		this.id = idModulo;
	}

	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	public String getCodigo() {
		return codigo;
	}

	public void setCodigo(String codigo) {
		this.codigo = codigo;
	}

	public Integer getCargaHoraria() {
		return this.cargaHoraria;
	}

	public void setCargaHoraria(Integer cargaHoraria) {
		this.cargaHoraria = cargaHoraria;
	}

	public Set<ModuloCurricular> getModuloCurriculares() {
		return moduloCurriculares;
	}

	public void setModuloCurriculares(Set<ModuloCurricular> moduloCurricular) {
		this.moduloCurriculares = moduloCurricular;
	}

	/**
	 * Adiciona o módulo no conjunto de {@link ModuloDisciplina}.
	 * @param obj
	 * @return
	 */
	public boolean addModuloDisciplina(ModuloDisciplina obj) {
		obj.setModulo(this);
		return moduloDisciplinas.add(obj);
	}
	
	public Set<ModuloDisciplina> getModuloDisciplinas() {
		return moduloDisciplinas;
	}

	public void setModuloDisciplinas(Set<ModuloDisciplina> moduloDisciplinas) {
		this.moduloDisciplinas = moduloDisciplinas;
	}

	public Set<ModuloQualificacao> getModuloQualificacoes() {
		return moduloQualificacoes;
	}

	public void setModuloQualificacoes(Set<ModuloQualificacao> moduloQualificacoes) {
		this.moduloQualificacoes = moduloQualificacoes;
	}

	/**
	 * Retorna as {@link QualificacaoTecnico} armazenadas.
	 * @return
	 */
	public Set<QualificacaoTecnico> getQualificacoes()  {
		Set<QualificacaoTecnico> qualificacoes = new HashSet<QualificacaoTecnico>();

		for (ModuloQualificacao mq : getModuloQualificacoes()) {
			qualificacoes.add(mq.getQualificacao());
		}

		return qualificacoes;
	}

	/**
	 * Atalho para remover uma disciplina do módulo
	 * @param disc
	 * @return
	 */
	public boolean removeDisciplina(ComponenteCurricular disc) {
		ModuloDisciplina md = new ModuloDisciplina();
		md.setDisciplina(disc);
		md.setModulo(this);
		return removeModuloDisciplina(md);
	}

	/**
	 * Remove o {@link ModuloDisciplina} da listagem.
	 * @param obj
	 * @return
	 */
	public boolean removeModuloDisciplina(ModuloDisciplina obj) {
		return moduloDisciplinas.remove(obj);
	}

	public Unidade getUnidade() {
		return unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}

	public char getNivel() {
		return nivel;
	}

	public void setNivel(char nivel) {
		this.nivel = nivel;
	}

	/**
	 * Atalho para retornar as disciplinas do módulo,
	 * sem ter que buscar por ModuloDisciplina
	 * @return
	 */
	public ArrayList<ComponenteCurricular> getDisciplinas()  {
		boolean isPossuiDetalhes = true;
		
		ArrayList<ComponenteCurricular> disciplinas = new ArrayList<ComponenteCurricular>();
		if (moduloDisciplinas != null) {
			for (ModuloDisciplina disciplina : moduloDisciplinas) {
				disciplinas.add(disciplina.getDisciplina());
				if (disciplina.getDisciplina().getDetalhes() == null)
					isPossuiDetalhes = false;
			}
		}
		
		if (isPossuiDetalhes) {
			Collections.sort(disciplinas, new Comparator<ComponenteCurricular>() {
				
				public int compare(ComponenteCurricular o1, ComponenteCurricular o2) {
					
					return o1.getNome().compareTo(o2.getNome());
				}
				
			});
		}
		
		return disciplinas;
	}

	/**
	 * Retorna as estruturas curriculares associadas.
	 * @return
	 */
	public Set<EstruturaCurricularTecnica> getEstruturasCurriculares()  {
		HashSet<EstruturaCurricularTecnica> ec = new HashSet<EstruturaCurricularTecnica>();
		if (moduloCurriculares != null) {
			for (ModuloCurricular mc : moduloCurriculares) {
				ec.add(mc.getEstruturaCurricularTecnica());
			}
		}
		return ec;
	}

	/**
	 * Implementação do hashCode levando-se em consideração a descrição e o id do {@link Modulo}.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((descricao == null) ? 0 : descricao.hashCode());
		result = prime * result + id;
		return result;
	}

	/**
	 * Implementação do equals levando-se em consideração a descrição e o id do {@link Modulo}.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Modulo other = (Modulo) obj;
		if (descricao == null) {
			if (other.descricao != null)
				return false;
		} else if (!descricao.equals(other.descricao))
			return false;
		if (id != other.id)
			return false;
		return true;
	}


	public String getFullDesc() {
		return getCodigo() + " - " + getDescricao() + " - " + getCargaHoraria();
	}
	

	public ModuloDisciplina getModuloDisciplina() {
		return moduloDisciplina;
	}

	public void setModuloDisciplina(ModuloDisciplina moduloDisciplina) {
		this.moduloDisciplina = moduloDisciplina;
	}

	public Date getDataCadastro() {
		return dataCadastro;
	}

	public void setDataCadastro(Date dataCadastro) {
		this.dataCadastro = dataCadastro;
	}

	public RegistroEntrada getRegistroCadastro() {
		return registroCadastro;
	}

	public void setRegistroCadastro(RegistroEntrada registroCadastro) {
		this.registroCadastro = registroCadastro;
	}

	public Date getDataAtualizacao() {
		return dataAtualizacao;
	}

	public void setDataAtualizacao(Date dataAtualizacao) {
		this.dataAtualizacao = dataAtualizacao;
	}

	public RegistroEntrada getRegistroAtualizacao() {
		return registroAtualizacao;
	}

	public void setRegistroAtualizacao(RegistroEntrada registroAtualizacao) {
		this.registroAtualizacao = registroAtualizacao;
	}

	/**
	 * Realiza a validação dos dados do {@link Modulo} e adiciona as mensagens de erro respectivas.
	 */
	@Override
	public ListaMensagens validate() {
		ListaMensagens lista = new ListaMensagens();
		ValidatorUtil.validateRequired(descricao, "Descrição", lista);
		ValidatorUtil.validateRequired(cargaHoraria, "Carga Horária Total", lista);

		if (getModuloDisciplina().getDisciplina() != null && getModuloDisciplina().getDisciplina().getId() == 0 && getModuloDisciplinas().size() == 0) 
			lista.addErro("É necessário informar pelo menos uma disciplina.");
		return lista;
	}
	
}