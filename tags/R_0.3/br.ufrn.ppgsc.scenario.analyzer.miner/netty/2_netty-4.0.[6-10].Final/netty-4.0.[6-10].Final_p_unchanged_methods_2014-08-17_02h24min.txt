# Métodos que tiveram performance inalterada na evolução
291
io.netty.channel.DefaultChannelPromise.channel()
io.netty.testsuite.util.BogusKeyStore.asInputStream()
io.netty.testsuite.util.BogusKeyStore.getCertificatePassword()
io.netty.buffer.AbstractByteBuf.writeMedium(int)
io.netty.testsuite.transport.socket.SocketEchoTest$1(io.netty.testsuite.transport.socket.SocketEchoTest.EchoHandler)
io.netty.buffer.AbstractByteBufAllocator.validate(int,int)
io.netty.channel.socket.nio.NioSocketChannel.config()
io.netty.channel.oio.AbstractOioMessageChannel(io.netty.channel.Channel)
io.netty.channel.AdaptiveRecvByteBufAllocator()
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEcho()
io.netty.buffer.UnpooledHeapByteBuf.setByte(int,int)
io.netty.channel.ChannelInitializer()
io.netty.testsuite.util.BogusKeyStore.getKeyStorePassword()
io.netty.buffer.UnpooledHeapByteBuf._setShort(int,int)
io.netty.bootstrap.AbstractBootstrap.localAddress()
io.netty.testsuite.transport.socket.DatagramMulticastTest$1(io.netty.testsuite.transport.socket.DatagramMulticastTest)
io.netty.bootstrap.ServerBootstrap.newAttrArray(int)
io.netty.testsuite.transport.socket.DatagramMulticastTest.testMulticast(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.Bootstrap)
io.netty.channel.socket.oio.OioServerSocketChannel.config()
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig.setOption(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client.waitForActive(boolean)
io.netty.testsuite.transport.socket.SocketObjectEchoTest$1(io.netty.testsuite.transport.socket.SocketObjectEchoTest,io.netty.testsuite.transport.socket.SocketObjectEchoTest.EchoHandler)
io.netty.channel.DefaultChannelHandlerContext$14(io.netty.channel.DefaultChannelHandlerContext,io.netty.channel.DefaultChannelHandlerContext,io.netty.channel.ChannelPromise)
io.netty.channel.socket.oio.OioDatagramChannel.config()
io.netty.bootstrap.AbstractBootstrap$BootstrapChannelFactory(java.lang.Class)
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler.handlerAdded(io.netty.channel.ChannelHandlerContext)
io.netty.channel.DefaultChannelPipeline$TailHandler()
io.netty.testsuite.transport.socket.SocketSslEchoTest$1(io.netty.testsuite.transport.socket.SocketSslEchoTest,javax.net.ssl.SSLEngine,boolean,io.netty.testsuite.transport.socket.SocketSslEchoTest.EchoHandler)
io.netty.bootstrap.AbstractBootstrap$2(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.DatagramUnicastTest$1(io.netty.testsuite.transport.socket.DatagramUnicastTest,java.util.concurrent.CountDownLatch)
io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.SocketSpdyEchoTest.createFrames(int)
io.netty.testsuite.transport.socket.SocketObjectEchoTest$2(io.netty.testsuite.transport.socket.SocketObjectEchoTest,io.netty.testsuite.transport.socket.SocketObjectEchoTest.EchoHandler)
io.netty.channel.DefaultChannelPromise.setSuccess()
io.netty.testsuite.transport.socket.SocketObjectEchoTest.testObjectEcho()
io.netty.channel.DefaultChannelHandlerContext.channel()
io.netty.channel.socket.oio.OioDatagramChannel.joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.bootstrap.AbstractBootstrap.doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.channel.ChannelMetadata(boolean)
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig.setTcpNoDelay(boolean)
io.netty.bootstrap.ServerBootstrap.newOptionArray(int)
io.netty.testsuite.transport.socket.SocketFileRegionTest.testFileRegion()
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler()
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEchoWithAdditionalExecutor()
io.netty.channel.nio.AbstractNioChannel.isCompatible(io.netty.channel.EventLoop)
io.netty.channel.socket.oio.OioSocketChannel.isOpen()
io.netty.channel.ChannelInboundHandlerAdapter()
io.netty.channel.DefaultAddressedEnvelope(java.lang.Object,java.net.SocketAddress)
io.netty.channel.DefaultChannelConfig.setOption(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.channel.socket.nio.NioSocketChannel.isActive()
io.netty.testsuite.transport.socket.SocketSpdyEchoTest$SpdyEchoTestServerHandler()
io.netty.handler.ssl.SslHandler$LazyChannelPromise(io.netty.handler.ssl.SslHandler,io.netty.handler.ssl.SslHandler.LazyChannelPromise)
io.netty.testsuite.transport.socket.SocketEchoTest$EchoHandler()
io.netty.testsuite.transport.socket.SocketEchoTest$2(io.netty.testsuite.transport.socket.SocketEchoTest.EchoHandler)
io.netty.channel.ThreadPerChannelEventLoop(io.netty.channel.ThreadPerChannelEventLoopGroup)
io.netty.channel.socket.nio.NioServerSocketChannel()
io.netty.channel.socket.nio.NioSocketChannel(io.netty.channel.Channel,java.nio.channels.SocketChannel)
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest.testShutdownOutput(io.netty.bootstrap.Bootstrap)
io.netty.channel.socket.oio.OioSocketChannel.isActive()
io.netty.testsuite.transport.socket.SocketSslEchoTest$2(io.netty.testsuite.transport.socket.SocketSslEchoTest,javax.net.ssl.SSLEngine,boolean,io.netty.testsuite.transport.socket.SocketSslEchoTest.EchoHandler)
io.netty.testsuite.transport.socket.SocketStringEchoTest.testStringEcho()
io.netty.channel.SingleThreadEventLoop(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)
io.netty.channel.ChannelHandlerAdapter.handlerAdded(io.netty.channel.ChannelHandlerContext)
io.netty.channel.socket.nio.NioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.DatagramMulticastTest$MulticastTestHandler(io.netty.testsuite.transport.socket.DatagramMulticastTest.MulticastTestHandler)
io.netty.channel.socket.oio.OioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.channel.DefaultChannelConfig.setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
io.netty.bootstrap.ServerBootstrap()
io.netty.channel.socket.DatagramPacket(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)
io.netty.channel.group.DefaultChannelGroup(java.lang.String,io.netty.util.concurrent.EventExecutor)
io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe(io.netty.channel.nio.AbstractNioMessageChannel)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server.shutdown()
io.netty.buffer.SlicedByteBuf(io.netty.buffer.ByteBuf,int,int)
io.netty.channel.group.CombinedIterator(java.util.Iterator,java.util.Iterator)
io.netty.testsuite.transport.socket.SocketBufReleaseTest.access$0()
io.netty.channel.AbstractChannel.voidPromise()
io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest$TestHandler()
io.netty.handler.ssl.SslHandler(javax.net.ssl.SSLEngine,boolean)
io.netty.testsuite.transport.socket.AbstractServerSocketTest.run()
io.netty.channel.socket.oio.OioServerSocketChannel.newServerSocket()
io.netty.channel.ChannelOption(java.lang.String)
io.netty.channel.socket.nio.NioDatagramChannelConfig.setOption0(java.lang.Object,java.lang.Object)
io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)
io.netty.channel.socket.DefaultDatagramChannelConfig.setReuseAddress(boolean)
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEchoWithVoidPromise(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.channel.group.DefaultChannelGroup$1(io.netty.channel.group.DefaultChannelGroup)
io.netty.testsuite.transport.socket.SocketTestPermutation$2$1(null)
io.netty.channel.oio.AbstractOioChannel$1(io.netty.channel.oio.AbstractOioChannel)
io.netty.channel.socket.nio.NioDatagramChannel.javaChannel()
io.netty.bootstrap.AbstractBootstrap.channelFactory()
io.netty.channel.socket.nio.NioSocketChannel.isInputShutdown()
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest.testShutdownOutput()
io.netty.channel.ThreadPerChannelEventLoop$1(io.netty.channel.ThreadPerChannelEventLoop)
io.netty.testsuite.transport.socket.AbstractDatagramTest.run()
io.netty.channel.socket.nio.NioSocketChannel.javaChannel()
io.netty.channel.nio.AbstractNioChannel.isInputShutdown()
io.netty.channel.socket.nio.NioSocketChannel.shutdownOutput()
io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest.testShutdownOutput()
io.netty.channel.AbstractChannel.unsafe()
io.netty.channel.socket.DefaultDatagramChannelConfig.setNetworkInterface(java.net.NetworkInterface)
io.netty.testsuite.transport.socket.SocketTestPermutation$4.getValue()
io.netty.bootstrap.AbstractBootstrap.option(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.channel.socket.nio.NioDatagramChannelConfig.setNetworkInterface(java.net.NetworkInterface)
io.netty.testsuite.transport.socket.SocketTestPermutation.access$0()
io.netty.channel.socket.DefaultSocketChannelConfig.setOption(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client(java.lang.String,int)
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig.setConnectTimeoutMillis(int)
io.netty.channel.socket.nio.NioDatagramChannel.config()
io.netty.channel.socket.nio.NioServerSocketChannel.localAddress0()
io.netty.testsuite.transport.socket.SocketFileRegionTest$TestHandler(io.netty.testsuite.transport.socket.SocketFileRegionTest.TestHandler)
io.netty.testsuite.util.BogusTrustManagerFactory$1()
io.netty.channel.ChannelOutboundBuffer$1()
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEcho0(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap,boolean,boolean)
io.netty.channel.socket.DefaultServerSocketChannelConfig(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)
io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest.testFixedLengthEcho(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client.shutdown()
io.netty.testsuite.transport.socket.SocketTestPermutation.access$1()
io.netty.channel.AbstractChannel$AbstractUnsafe$1(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise)
io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe(io.netty.channel.nio.AbstractNioMessageChannel,io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe)
io.netty.channel.socket.oio.OioSocketChannel$1(io.netty.channel.socket.oio.OioSocketChannel,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server.waitForActive(boolean)
io.netty.channel.nio.AbstractNioMessageChannel.newUnsafe()
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEchoWithVoidPromise()
io.netty.bootstrap.AbstractBootstrap$1(io.netty.bootstrap.AbstractBootstrap,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.SocketBufReleaseTest.testBufRelease()
io.netty.buffer.UnpooledHeapByteBuf.alloc()
io.netty.buffer.UnpooledHeapByteBuf.setArray(byte[])
io.netty.channel.DefaultChannelPromise.setSuccess(java.lang.Void)
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEchoWithAdditionalExecutorAndVoidPromise()
io.netty.channel.DefaultChannelPipeline.checkDuplicateName(java.lang.String)
io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest$EchoHandler()
io.netty.testsuite.transport.socket.SocketObjectEchoTest$EchoHandler()
io.netty.testsuite.transport.socket.SocketFileRegionTest$TestHandler()
io.netty.channel.socket.oio.OioSocketChannel.config()
io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest.testFixedLengthEcho()
io.netty.channel.socket.oio.OioServerSocketChannel()
io.netty.buffer.UnpooledHeapByteBuf.copy(int,int)
io.netty.testsuite.transport.socket.SocketFileRegionTest.testFileRegionVoidPromise()
io.netty.buffer.EmptyByteBuf(io.netty.buffer.ByteBufAllocator,java.nio.ByteOrder)
io.netty.channel.socket.oio.OioDatagramChannel()
io.netty.buffer.EmptyByteBuf(io.netty.buffer.ByteBufAllocator)
io.netty.buffer.UnpooledByteBufAllocator(boolean)
io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest$1(io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest,io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest.EchoHandler)
io.netty.channel.socket.nio.NioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)
io.netty.bootstrap.AbstractBootstrap.localAddress(java.net.SocketAddress)
io.netty.channel.socket.nio.NioServerSocketChannel.javaChannel()
io.netty.channel.DefaultChannelPipeline.context(java.lang.Class)
io.netty.channel.socket.nio.NioSocketChannel.shutdownOutput(io.netty.channel.ChannelPromise)
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe(io.netty.channel.nio.AbstractNioChannel)
io.netty.testsuite.transport.socket.SocketObjectEchoTest.testObjectEcho(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest$TestHandler()
io.netty.testsuite.transport.socket.SocketTestPermutation$1.getKey()
io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest$TestHandler(io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest.TestHandler)
io.netty.testsuite.transport.socket.SocketTestPermutation$1.getValue()
io.netty.buffer.AbstractByteBuf.copy()
io.netty.testsuite.transport.socket.SocketBufReleaseTest.testBufRelease(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.SocketSpdyEchoTest$SpdyEchoTestClientHandler(io.netty.buffer.ByteBuf)
io.netty.channel.DefaultChannelPipeline.get(java.lang.Class)
io.netty.channel.socket.nio.NioSocketChannel$1(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.DatagramUnicastTest.testSimpleSend()
io.netty.handler.ssl.SslHandler$LazyChannelPromise(io.netty.handler.ssl.SslHandler)
io.netty.channel.DefaultChannelPipeline$HeadHandler(io.netty.channel.Channel.Unsafe)
io.netty.channel.nio.AbstractNioByteChannel(io.netty.channel.Channel,java.nio.channels.SelectableChannel)
io.netty.bootstrap.Bootstrap.remoteAddress(java.net.SocketAddress)
io.netty.buffer.UnpooledHeapByteBuf._setByte(int,int)
io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest$TestHandler(io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest.TestHandler)
io.netty.buffer.UnpooledHeapByteBuf(io.netty.buffer.ByteBufAllocator,int,int)
io.netty.bootstrap.Bootstrap$2(io.netty.channel.ChannelFuture,java.net.SocketAddress,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.channel.VoidChannelPromise(io.netty.channel.Channel,boolean)
io.netty.testsuite.transport.socket.DatagramUnicastTest.testSimpleSend(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.Bootstrap)
io.netty.channel.group.CombinedIterator.hasNext()
io.netty.channel.socket.nio.NioSocketChannel(java.nio.channels.SocketChannel)
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest$TestHandler()
io.netty.bootstrap.AbstractBootstrap.group(io.netty.channel.EventLoopGroup)
io.netty.channel.socket.oio.OioSocketChannel(java.net.Socket)
io.netty.testsuite.transport.socket.SocketEchoTest$EchoHandler(io.netty.testsuite.transport.socket.SocketEchoTest.EchoHandler)
io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest.testShutdownOutput(io.netty.bootstrap.ServerBootstrap)
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest$TestHandler(io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest.TestHandler)
io.netty.buffer.AbstractByteBuf.writeShort(int)
io.netty.channel.DefaultAddressedEnvelope(java.lang.Object,java.net.SocketAddress,java.net.SocketAddress)
io.netty.bootstrap.Bootstrap.connect()
io.netty.buffer.AbstractByteBufAllocator.directBuffer(int,int)
io.netty.channel.socket.nio.NioSocketChannel.isOutputShutdown()
io.netty.buffer.AbstractByteBuf.maxCapacity()
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig(io.netty.channel.socket.SocketChannel,java.net.Socket)
io.netty.channel.group.CombinedIterator.next()
io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest$2(io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest,io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest.EchoHandler)
io.netty.channel.ChannelOutboundBuffer(io.netty.util.Recycler.Handle,io.netty.channel.ChannelOutboundBuffer)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe(io.netty.channel.nio.AbstractNioByteChannel,io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe)
io.netty.testsuite.transport.socket.SocketStringEchoTest$2(io.netty.testsuite.transport.socket.SocketStringEchoTest,io.netty.testsuite.transport.socket.SocketStringEchoTest.StringEchoHandler)
io.netty.buffer.AbstractByteBuf.writeInt(int)
io.netty.testsuite.transport.socket.SocketTestPermutation.access$2()
io.netty.buffer.UnpooledHeapByteBuf(io.netty.buffer.ByteBufAllocator,byte[],int)
io.netty.channel.ChannelOption.validate(java.lang.Object)
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEcho(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.AbstractSocketTest.run()
io.netty.testsuite.transport.socket.SocketStringEchoTest$1(io.netty.testsuite.transport.socket.SocketStringEchoTest,io.netty.testsuite.transport.socket.SocketStringEchoTest.StringEchoHandler)
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler.check()
io.netty.channel.socket.nio.NioDatagramChannelConfig(io.netty.channel.socket.nio.NioDatagramChannel,java.nio.channels.DatagramChannel)
io.netty.channel.MultithreadEventLoopGroup.next()
io.netty.channel.group.DefaultChannelGroup.isEmpty()
io.netty.testsuite.util.BogusSslContextFactory.getClientContext()
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEchoWithAdditionalExecutorAndVoidPromise(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.DatagramUnicastTest$2(io.netty.testsuite.transport.socket.DatagramUnicastTest)
io.netty.testsuite.util.TestUtils.isSctpSupported()
io.netty.channel.socket.nio.NioServerSocketChannel.localAddress()
io.netty.testsuite.transport.socket.SocketSpdyEchoTest$1(io.netty.testsuite.transport.socket.SocketSpdyEchoTest,io.netty.testsuite.transport.socket.SocketSpdyEchoTest.SpdyEchoTestServerHandler)
io.netty.bootstrap.AbstractBootstrap.options()
io.netty.buffer.AbstractByteBufAllocator(boolean)
io.netty.channel.socket.nio.NioDatagramChannel(io.netty.channel.socket.InternetProtocolFamily)
io.netty.channel.socket.oio.OioDatagramChannel.isActive()
io.netty.channel.oio.OioByteStreamChannel$2()
io.netty.channel.socket.oio.OioSocketChannel()
io.netty.bootstrap.AbstractBootstrap.channelFactory(io.netty.bootstrap.ChannelFactory)
io.netty.channel.oio.OioByteStreamChannel(io.netty.channel.Channel)
io.netty.testsuite.transport.socket.SocketStartTlsTest$StartTlsClientHandler(io.netty.testsuite.transport.socket.SocketStartTlsTest,javax.net.ssl.SSLEngine)
io.netty.handler.ssl.SslHandler.handshakeFuture()
io.netty.channel.socket.DefaultSocketChannelConfig.setTcpNoDelay(boolean)
io.netty.testsuite.util.BogusSslContextFactory.getServerContext()
io.netty.channel.CompleteChannelFuture(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
io.netty.testsuite.transport.socket.SocketFileRegionTest.testFileRegion0(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap,boolean)
io.netty.channel.socket.oio.OioSocketChannel.isOutputShutdown()
io.netty.testsuite.transport.socket.DatagramMulticastTest$MulticastTestHandler()
io.netty.channel.socket.oio.OioSocketChannel(io.netty.channel.Channel,java.net.Socket)
io.netty.bootstrap.AbstractBootstrap.handler()
io.netty.channel.AbstractChannel.access$3(io.netty.channel.AbstractChannel,io.netty.channel.EventLoop)
io.netty.channel.socket.oio.OioDatagramChannel.isOpen()
io.netty.bootstrap.Bootstrap.remoteAddress(java.net.InetAddress,int)
io.netty.channel.SimpleChannelInboundHandler()
io.netty.channel.socket.nio.NioDatagramChannel.leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)
io.netty.channel.socket.InternetProtocolFamily(java.lang.String,int)
io.netty.handler.ssl.SslHandler(javax.net.ssl.SSLEngine,java.util.concurrent.Executor)
io.netty.testsuite.util.BogusTrustManagerFactory.getTrustManagers()
io.netty.channel.nio.AbstractNioMessageChannel(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)
io.netty.handler.ssl.SslHandler(javax.net.ssl.SSLEngine)
io.netty.testsuite.transport.socket.SocketStringEchoTest.testStringEcho(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler.access$2(io.netty.testsuite.transport.socket.SocketBufReleaseTest.BufWriterHandler)
io.netty.testsuite.transport.socket.SocketSpdyEchoTest$SpdyEchoTestServerHandler(io.netty.testsuite.transport.socket.SocketSpdyEchoTest.SpdyEchoTestServerHandler)
io.netty.buffer.ByteBuf()
io.netty.bootstrap.AbstractBootstrap.group()
io.netty.channel.socket.oio.OioDatagramChannel.ensureBound()
io.netty.bootstrap.ServerBootstrap.childOption(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler(io.netty.testsuite.transport.socket.SocketBufReleaseTest.BufWriterHandler)
io.netty.channel.socket.oio.OioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)
io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe(io.netty.channel.oio.AbstractOioChannel)
io.netty.channel.nio.AbstractNioChannel.javaChannel()
io.netty.channel.oio.AbstractOioByteChannel(io.netty.channel.Channel)
io.netty.testsuite.transport.socket.SocketFileRegionTest$1()
io.netty.channel.FixedRecvByteBufAllocator$HandleImpl(int)
io.netty.testsuite.transport.socket.SocketStartTlsTest$1(io.netty.testsuite.transport.socket.SocketStartTlsTest,io.netty.util.concurrent.EventExecutorGroup,io.netty.testsuite.transport.socket.SocketStartTlsTest.StartTlsServerHandler)
io.netty.testsuite.transport.socket.SocketStringEchoTest$StringEchoHandler()
io.netty.testsuite.transport.socket.SocketFileRegionTest.testFileRegion(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.SocketEchoTest$3()
io.netty.bootstrap.AbstractBootstrap.attrs()
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest$TestHandler()
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe(io.netty.channel.nio.AbstractNioByteChannel)
io.netty.bootstrap.ServerBootstrap.childHandler(io.netty.channel.ChannelHandler)
io.netty.bootstrap.AbstractBootstrap.handler(io.netty.channel.ChannelHandler)
io.netty.channel.oio.AbstractOioByteChannel.isInputShutdown()
io.netty.channel.VoidChannelPromise.isDone()
io.netty.testsuite.transport.socket.SocketObjectEchoTest$EchoHandler(io.netty.testsuite.transport.socket.SocketObjectEchoTest.EchoHandler)
io.netty.channel.DefaultChannelConfig.setConnectTimeoutMillis(int)
io.netty.bootstrap.Bootstrap$1(io.netty.bootstrap.Bootstrap,io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.channel.VoidChannelPromise.channel()
io.netty.channel.socket.nio.NioSocketChannel()
io.netty.channel.DefaultChannelConfig.validate(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.channel.AdaptiveRecvByteBufAllocator.getSizeTableIndex(int)
io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)
io.netty.handler.ssl.SslHandler.access$0(io.netty.handler.ssl.SslHandler)
io.netty.buffer.UnpooledHeapByteBuf._setMedium(int,int)
io.netty.testsuite.transport.socket.SocketTestPermutation.access$3()
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server.waitForShutdown()
io.netty.testsuite.transport.socket.AbstractClientSocketTest.run()
io.netty.testsuite.transport.socket.SocketStartTlsTest$2(io.netty.testsuite.transport.socket.SocketStartTlsTest,io.netty.util.concurrent.EventExecutorGroup,io.netty.testsuite.transport.socket.SocketStartTlsTest.StartTlsClientHandler)
io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest$EchoHandler(io.netty.testsuite.transport.socket.SocketFixedLengthEchoTest.EchoHandler)
io.netty.channel.group.DefaultChannelGroup.size()
io.netty.channel.oio.OioByteStreamChannel$1()
io.netty.channel.socket.DefaultSocketChannelConfig.setConnectTimeoutMillis(int)
io.netty.channel.socket.DefaultDatagramChannelConfig.setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
io.netty.bootstrap.Bootstrap()
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest$TestHandler(io.netty.testsuite.transport.socket.SocketConnectionAttemptTest.TestHandler)
io.netty.testsuite.transport.socket.SocketFileRegionTest.testFileRegionVoidPromise(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.SocketEchoTest.testSimpleEchoWithAdditionalExecutor(io.netty.bootstrap.ServerBootstrap,io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.DatagramMulticastTest.testMulticast()
io.netty.channel.DefaultFileRegion(java.nio.channels.FileChannel,long,long)
io.netty.buffer.AbstractByteBuf(int)
io.netty.channel.nio.AbstractNioChannel.isOpen()
io.netty.channel.DefaultChannelHandlerContext.handler()
io.netty.testsuite.transport.socket.SocketTestPermutation$5.newInstance()
io.netty.channel.MultithreadEventLoopGroup.register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)
0.05
