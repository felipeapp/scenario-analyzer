/*
 * Sistema Integrado de Gestão de Atividades Acadêmicas - SIGAA
 * Superintendência de Informática - UFRN
 *
 * Created on '13/09/2006'
 *
 */
package br.ufrn.sigaa.dominio;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.springframework.util.CollectionUtils;

import br.ufrn.arq.dominio.PersistDB;
import br.ufrn.arq.seguranca.dominio.PassaporteLogon;
import br.ufrn.arq.usuarios.UserOnlineMonitor;
import br.ufrn.arq.util.EqualsUtil;
import br.ufrn.arq.util.HashCodeUtil;
import br.ufrn.comum.dominio.Papel;
import br.ufrn.comum.dominio.Sistema;
import br.ufrn.comum.dominio.TipoUsuario;
import br.ufrn.comum.dominio.UsuarioGeral;
import br.ufrn.sigaa.ead.dominio.TutorOrientador;
import br.ufrn.sigaa.ensino.dominio.DiscenteAdapter;
import br.ufrn.sigaa.ensino.latosensu.dominio.CursoLato;
import br.ufrn.sigaa.ensino.medio.dominio.UsuarioFamiliar;
import br.ufrn.sigaa.pesquisa.dominio.Consultor;
import br.ufrn.sigaa.pessoa.dominio.Discente;
import br.ufrn.sigaa.pessoa.dominio.DocenteExterno;
import br.ufrn.sigaa.pessoa.dominio.Pessoa;
import br.ufrn.sigaa.pessoa.dominio.Servidor;

/**
 * Usuário generated by hbm2java
 */
@Entity
@Table(schema="comum", name = "usuario", uniqueConstraints = { @UniqueConstraint(columnNames = { "login" }) })
public class Usuario extends UsuarioGeral implements PersistDB {

	// Fields

	private int id;

	private Unidade unidade;

	private Pessoa pessoaSigaa;

	private Servidor servidor;

	private TutorOrientador tutor;

	private Consultor consultor;

	private Discente discente;

	private Collection<CursoLato> cursosLato = new HashSet<CursoLato>(0);

	private CursoLato cursoLato;

	/* Atributo transiente utilizado */
	private char nivelEnsino;

	private DocenteExterno docenteExterno;

	private List<VinculoUsuario> vinculos;

	private VinculoUsuario vinculoAtivo;

	private String confirmaSenha;

	private PassaporteLogon passaporteLogon;
	
	private boolean passaporte;
	
	// Constructors


	/** default constructor */
	public Usuario() {
		pessoaSigaa = new Pessoa();
	}

	/** default minimal constructor */
	public Usuario(int id) {
		this.id = id;
	}

	public Usuario(int id, String nome, String login ) {
		setId(id);
		setLogin(login);
		pessoaSigaa = new Pessoa();
		getPessoa().setNome(nome);
	}

	public Usuario(int id, String nome, Long cpf, String login, String siglaUnidade) {
		setId(id);
		setLogin(login);

		setPessoa(new Pessoa());
		setNome(nome);
		setCpf(cpf);

		setUnidade(new Unidade(-1, null, null, siglaUnidade));
	}

	// Property accessors
	@Override
	@Id
	@Column(name = "id_usuario", unique = true, nullable = false, insertable = true, updatable = true)
	public int getId() {
		return this.id;
	}

	@Override
	public void setId(int idUsuario) {
		this.id = idUsuario;
	}

	@Override
	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "id_unidade", unique = false, nullable = true, insertable = true, updatable = true)
	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidadeByIdUnidade) {
		this.unidade = unidadeByIdUnidade;
	}

	@Transient
	public Discente getDiscente() {
		return discente;
	}

	public void setDiscente(Discente discente) {
		this.discente = discente;
	}

	@Override
	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "id_pessoa", unique = false, nullable = true, insertable = true, updatable = true)
	public Pessoa getPessoa() {
		return this.pessoaSigaa;
	}

	public void setPessoa(Pessoa pessoa) {
		this.pessoaSigaa = pessoa;
	}

	@Transient
	public Servidor getServidor() {
		return this.servidor;
	}

	public void setServidor(Servidor servidor) {
		this.servidor = servidor;
	}

	@Transient
	public TutorOrientador getTutor() {
		return this.tutor;
	}

	public void setTutor(TutorOrientador tutor) {
		this.tutor = tutor;
	}

	@ManyToOne(cascade = {}, fetch = FetchType.LAZY)
	@JoinColumn(name = "id_consultor", unique = false, nullable = true, insertable = true, updatable = true)
	public Consultor getConsultor() {
		return this.consultor;
	}

	public void setConsultor(Consultor consultor) {
		this.consultor = consultor;
	}

	@Override
	@Column(name = "login", unique = true, nullable = false, insertable = true, updatable = true, length = 20)
	public String getLogin() {
		return this.login;
	}

	@Override
	public void setLogin(String login) {
		if (login != null)
			this.login = login.toLowerCase();
	}

	@Override
	@Column(name = "email", unique = false, nullable = true, insertable = true, updatable = true, length = 50)
	public String getEmail() {
		return this.email;
	}

	@Override
	public void setEmail(String email) {
		this.email = email;
	}

	@Override
	@Column(name="data_cadastro")
	public Date getDataCadastro() {
		return super.getDataCadastro();
	}

	@Override
	@Column(name = "inativo", unique = false, nullable = true, insertable = true, updatable = true)
	public boolean isInativo() {
		return this.inativo;
	}

	public void setInativo(Boolean inativo) {
		this.inativo = inativo;
	}

	@Override
	@Column(name = "ultimo_acesso", unique = false, nullable = true, insertable = true, updatable = true, length = 8)
	public Date getUltimoAcesso() {
		return this.ultimoAcesso;
	}

	@Override
	public void setUltimoAcesso(Date ultimoAcesso) {
		this.ultimoAcesso = ultimoAcesso;
	}

	@Override
	@Transient
	public String getSenha() {
		return this.senha;
	}

	@Override
	public void setSenha(String senha) {
		this.senha = senha;
	}

	@Override
	@Column(name = "autorizado", unique = false, nullable = false, insertable = true, updatable = true)
	public boolean isAutorizado() {
		if (this.autorizado == null)
			return false;
		else
			return this.autorizado;
	}

	public void setAutorizado(Boolean autorizado) {
		if (autorizado == null)
			this.autorizado = false;
		else
			this.autorizado = autorizado;
	}

	@Override
	@Temporal(TemporalType.DATE)
	@Column(name = "expira_senha", unique = false, nullable = true, insertable = true, updatable = true, length = 4)
	public Date getExpiraSenha() {
		return this.expiraSenha;
	}

	@Override
	public void setExpiraSenha(Date expiraSenha) {
		this.expiraSenha = expiraSenha;
	}

	@Override
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "tipo", unique = false, nullable = false, insertable = true, updatable = true)
	public TipoUsuario getTipo() {
		return this.tipo;
	}

	@Override
	public void setTipo(TipoUsuario tipo) {
		this.tipo = tipo;
	}

	@Override
	@Column(name = "ramal", unique = false, nullable = true, insertable = true, updatable = true, length = 20)
	public String getRamal() {
		return this.ramal;
	}

	@Override
	public void setRamal(String ramal) {
		this.ramal = ramal;
	}

	@Transient
	public boolean addPapel(Papel papel){
		return super.getPapeis().add( papel );
	}

	@Override
	public boolean equals(Object obj) {
		return EqualsUtil.testEquals(this, obj, "id");
	}

	@Override
	public int hashCode() {
		return HashCodeUtil.hashAll(id);
	}

	@Transient
	public Collection<CursoLato> getCursosLato() {
		return cursosLato;
	}

	public void setCursosLato(Collection<CursoLato> cursosLato) {
		this.cursosLato = cursosLato;
	}

	@Transient
	public CursoLato getCursoLato() {
		return cursoLato;
	}

	public void setCursoLato(CursoLato cursoLato) {
		this.cursoLato = cursoLato;
	}

	@Transient
	public boolean isCoordenadorLato(){
		return getCursoLato() != null;
	}

	@Override
	@Column(name = "id_foto")
	public Integer getIdFoto() {
		return idFoto;
	}

	@Override
	public void setIdFoto(Integer idFoto) {
		this.idFoto = idFoto;
	}

	@Transient
	public char getNivelEnsino() {
		return nivelEnsino;
	}

	public void setNivelEnsino(char nivelEnsino) {
		this.nivelEnsino = nivelEnsino;
	}

	@Transient
	public DocenteExterno getDocenteExterno() {
		return docenteExterno;
	}

	public void setDocenteExterno(DocenteExterno docenteExterno) {
		this.docenteExterno = docenteExterno;
	}

	@Transient
	public String getLoginNome(){
		return login + " - " +pessoaSigaa.getNome();
	}
	
	@Transient
	public String getSiapeNome(){
		return servidor.getSiape() + " - " + pessoaSigaa.getNome();
	}

	@Transient
	public boolean isSomenteConsultor() {
		return consultor != null && servidor == null && getDiscenteAtivo() == null;
	}

	@Transient
	public List<VinculoUsuario> getVinculos() {
		return vinculos;
	}
	
	@Transient
	public List<VinculoUsuario> getVinculosPrioritarios() {
		List<VinculoUsuario> result = new ArrayList<VinculoUsuario>();
		for (VinculoUsuario vinculo : vinculos) {
			if (vinculo.isPrioritario())
				result.add(vinculo);
		}
		return result;
	}

	public void setVinculos(List<VinculoUsuario> vinculos) {
		this.vinculos = vinculos;
	}

	@Transient
	public VinculoUsuario getVinculoAtivo() {
		return vinculoAtivo;
	}

	public void setVinculoAtivo(VinculoUsuario vinculoAtivo) {
		this.vinculoAtivo = vinculoAtivo;
	}

	public void setVinculoAtivo(int numero) {
		if (!CollectionUtils.isEmpty(vinculos)) {
			for (VinculoUsuario vinculo : vinculos) {
				if (vinculo.getNumero() == numero) {
					setVinculoAtivo(vinculo);
					break;
				}
			}
		}
	}

	@Transient
	public DiscenteAdapter getDiscenteAtivo() {
		if (vinculoAtivo != null) {
			return vinculoAtivo.getDiscente();
		}

		return null;
	}

	@Transient
	public Servidor getServidorAtivo() {
		if (vinculoAtivo != null) {
			return vinculoAtivo.getServidor();
		}

		return null;
	}
	
	@Transient
	public DocenteExterno getDocenteExternoAtivo() {
		if (vinculoAtivo != null) {
			return vinculoAtivo.getDocenteExterno();
		}		
		return null;
	}
	
	@Transient
	public UsuarioFamiliar getFamiliarAtivo() {
		if (vinculoAtivo != null) {
			return vinculoAtivo.getFamiliar();
		}		
		return null;
	}	

	@Override
	@Column(name="id_servidor")
	public Integer getIdServidor() {
		return super.getIdServidor();
	}

	@Override
	@Transient
	public String getNomeLogin() {
		if (pessoaSigaa == null){
			return null;
		}
		return pessoaSigaa.getNome() + " (" + login + ")";
	}

	@Transient
	public String getConfirmaSenha() {
		return confirmaSenha;
	}

	public void setConfirmaSenha(String confirmaSenha) {
		this.confirmaSenha = confirmaSenha;
	}

	@Transient
	public boolean isOnline() {
		return UserOnlineMonitor.isUserOnline(login, Sistema.SIGAA);
	}

	/**
	 * @return Retorna nome da pessoa SIGAA
	 */
	@Override
	@Transient
	public String getNome() {
		if (pessoaSigaa == null){
			return null;
		}
		return pessoaSigaa.getNome();
	}

	
	/**
	 * Seta o nome da pessoa SIGAA
	 * @param nome
	 */
	@Override
	public void setNome(String nome) {
		if (pessoaSigaa == null){
			pessoaSigaa = new Pessoa();
		}
		pessoaSigaa.setNome(nome);
	}
	
	
	
	/**
	 * Retorna o primeiro vinculo de servidor encontrado. 
	 * Pode existir situações onde o usuário pode possuir mais de dois vínuculos de servidor .
	 */
	@Transient
	public VinculoUsuario getVinculoServidor() {
		
		if (vinculos == null)
			return null;
		
		for (VinculoUsuario vinculo : vinculos) {
			if (vinculo.isAtivo() && vinculo.isVinculoServidor())
				return vinculo;
		}
		
		return null;
	}
	
	@Transient
	public boolean isPossuiVinculosAtivos() {
		for (VinculoUsuario v : vinculos) {
			if (v.isAtivo())
				return true;
		}
		return false;
	}	
	
	@Transient
	public boolean isPossuiVinculosInativos() {
		for (VinculoUsuario v : vinculos) {
			if (!v.isAtivo())
				return true;
		}
		return false;
	}
	
	
	@Transient
	public boolean isPassaporte() {
		return passaporte;
	}

	public void setPassaporte(boolean passaporte) {
		this.passaporte = passaporte;
	}

	@Transient
	public PassaporteLogon getPassaporteLogon() {
		return passaporteLogon;
	}

	public void setPassaporteLogon(PassaporteLogon passaporteLogon) {
		this.passaporteLogon = passaporteLogon;
	}
	
}
