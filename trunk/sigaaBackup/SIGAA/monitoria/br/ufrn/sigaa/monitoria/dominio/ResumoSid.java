package br.ufrn.sigaa.monitoria.dominio;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import br.ufrn.arq.dominio.RegistroEntrada;
import br.ufrn.arq.negocio.validacao.ListaMensagens;
import br.ufrn.arq.negocio.validacao.Validatable;
import br.ufrn.arq.seguranca.log.CriadoPor;
import br.ufrn.arq.util.EqualsUtil;
import br.ufrn.arq.util.ValidatorUtil;

/*******************************************************************************
 * <p>
 * Representa um resumo do das atividades do projeto para o seminário de
 * iniciação à docência. Anualmente um resumo das atividades do projeto é
 * submetido a avaliação da PROGRAD para apresentação na semana de ciência e
 * tecnologia através do seminário de iniciação à docência (SID).
 * <br/>
 * 
 * Os coordenadores do projeto cadastram os resumos e indicam quais os discentes
 * que participaram de sua elaboração.
 * <br/>
 * 
 * Este resumo é distribuído e avaliado por membros da comissão científica de monitoria.
 * </p>
 * 
 * 
 * ResumoSid generated by hbm2java
 ******************************************************************************/
@Entity
@Table(name = "resumo_sid", schema = "monitoria")
public class ResumoSid implements Validatable {

	// Fields
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	@Column(name = "id_resumo_sid")
	private int id;

	@Column(name = "resumo")
	private String resumo;

	@Column(name = "ano_sid")
	private Integer anoSid;

	@Column(name = "palavras_chave")
	private String palavrasChave;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "data_envio")
	private Date dataEnvio;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_projeto_monitoria")
	private ProjetoEnsino projetoEnsino = new ProjetoEnsino();

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_status")
	private StatusRelatorio status = new StatusRelatorio();

	@OneToMany(mappedBy = "resumoSid")
	@OrderBy(value = "discenteMonitoria")
	private Set<ParticipacaoSid> participacoesSid = new HashSet<ParticipacaoSid>();

	@OneToMany(mappedBy = "resumoSid")
	@OrderBy(value = "avaliador")
	private Set<AvaliacaoMonitoria> avaliacoes = new HashSet<AvaliacaoMonitoria>();

	@CriadoPor
	@ManyToOne
	@JoinColumn(name = "id_registro_entrada")	
	private RegistroEntrada registroEntrada;

	@ManyToOne
	@JoinColumn(name = "id_registro_entrada_exclusao")
	private RegistroEntrada registroEntradaExclusao;

	private boolean ativo;

	// Constructors

	/** default constructor */
	public ResumoSid() {
	}

	/** minimal constructor */
	public ResumoSid(int id) {
		this.id = id;
	}

	// Property accessors
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	
	public String getResumo() {
		return this.resumo;
	}

	public void setResumo(String resumo) {
		this.resumo = resumo;
	}


	public Integer getAnoSid() {
		return anoSid;
	}

	public void setAnoSid(Integer anoSid) {
		this.anoSid = anoSid;
	}

	public Date getDataEnvio() {
		return dataEnvio;
	}

	public void setDataEnvio(Date dataEnvio) {
		this.dataEnvio = dataEnvio;
	}

	public String getPalavrasChave() {
		return this.palavrasChave;
	}

	public void setPalavrasChave(String palavrasChave) {
		this.palavrasChave = palavrasChave;
	}

	public ProjetoEnsino getProjetoEnsino() {
		return projetoEnsino;
	}

	public void setProjetoEnsino(ProjetoEnsino projetoEnsino) {
		this.projetoEnsino = projetoEnsino;
	}

	public ListaMensagens validate() {
		ListaMensagens lista = new ListaMensagens();
		ValidatorUtil.validateRequired(resumo, "Resumo", lista);
		ValidatorUtil.validateRequired(palavrasChave, "Palavras-Chave", lista);
		ValidatorUtil.validaInt(anoSid, "Ano do Seminário", lista);
		ValidatorUtil.validateRequired(projetoEnsino, "Projeto de Monitoria", lista);
		if ((participacoesSid != null) && (!participacoesSid.isEmpty())) {
			for (ParticipacaoSid ps : participacoesSid) {
				if ((!ps.isParticipou()) && (ps.getJustificativa().trim().equals(""))) {
					lista.addErro("Em caso de não participação do discente no resumo, deve ser informada uma justificativa.");
					break;
				}
			}
		}
		if ((resumo != null) && (!resumo.trim().equals(""))) {
			ValidatorUtil.validateMaxLength(resumo, 1500, "Resumo", lista);
		}
		return lista;
	}

	/**
	 * @return the status
	 */
	public StatusRelatorio getStatus() {
		return status;
	}

	/**
	 * @param status
	 *            the status to set
	 */
	public void setStatus(StatusRelatorio status) {
		this.status = status;
	}

	public Set<ParticipacaoSid> getParticipacoesSid() {
		return participacoesSid;
	}

	public void setParticipacoesSid(Set<ParticipacaoSid> participacoesSid) {
		this.participacoesSid = participacoesSid;
	}

	// usuário que cadastrou o resumo
	public RegistroEntrada getRegistroEntrada() {
		return registroEntrada;
	}

	public void setRegistroEntrada(RegistroEntrada registroEntrada) {
		this.registroEntrada = registroEntrada;
	}

	public Set<AvaliacaoMonitoria> getAvaliacoes() {
		return avaliacoes;
	}

	public void setAvaliacoes(Set<AvaliacaoMonitoria> avaliacoes) {
		this.avaliacoes = avaliacoes;
	}

	public boolean isAtivo() {
		return ativo;
	}

	public void setAtivo(boolean ativo) {
		this.ativo = ativo;
	}

	// usuário que cadastrou o resumo
	public RegistroEntrada getRegistroEntradaExclusao() {
		return registroEntradaExclusao;
	}

	public void setRegistroEntradaExclusao(
			RegistroEntrada registroEntradaExclusao) {
		this.registroEntradaExclusao = registroEntradaExclusao;
	}

	/**
	 * Monta string como o nome de todos os participantes do resumo SID
	 * 
	 * @return
	 */
	@Transient
	public String getParticipantesCertificado() {

		StringBuffer participantesNomes = new StringBuffer();
		participantesNomes.append("");

		for (ParticipacaoSid p : getParticipacoesSid()) {
			if (p.isApresentou() && p.isParticipou())
				participantesNomes.append(", "
						+ p.getDiscenteMonitoria().getDiscente().getNome());
		}

		if (participantesNomes.toString().trim().equals("")) {
			return null;
		}
		
		String result = participantesNomes.toString().replaceFirst("[, ]", "");
		int pos = result.lastIndexOf(',');

		if (pos > 0) {
			return result.substring(0, pos) + " e" + result.substring(pos + 1);
		} else {
			return result;
		}

	}

	/**
	 * total de participantes do resumo sid. usado no certificado do sid
	 * 
	 * @return total de participantes do resumo sid
	 */
	@Transient
	public int getNumParticipantesCertificado() {
		int qtd = 0;
		for (ParticipacaoSid p : getParticipacoesSid()) {
			if (p.isApresentou() && p.isParticipou()) {
				qtd++;
			}
		}
		return qtd;
	}

	/**
	 * verifica se alguém do projeto participou e apresentou o resumo
	 * 
	 * @return
	 */
	@Transient
	public boolean isAutorizarEmissaoCertificado() {
		return (getParticipantesCertificado() != null);
	}

	/**
	 * Sequência utilizada para montagem do nome do 3º Seminário de Iniciação à
	 * Docência Utilizado no certificado do sid
	 * 
	 * @return
	 */
	@Transient
	public String getOrdinal() {
		return String.valueOf(anoSid - 2003);
	}

	/**
	 * String com todos os docentes ativos do projeto utilizado no certificado
	 * do sid
	 * 
	 * @return String com todos os docentes ativos do projeto
	 */
	@Transient
	public String getEquipeDocentes() {

		StringBuffer equipeDocentes = new StringBuffer();
		equipeDocentes.append("");
		for (EquipeDocente edocente : getProjetoEnsino().getEquipeDocentes()) {
			if ((edocente.getDataSaidaProjeto() == null) && (!edocente.isExcluido()) && (edocente.isAtivo())) {
				// && (!edocente.isCoordenador())) // não repete o coordenado na lista de orientadores...
				equipeDocentes.append(", " + edocente.getServidor().getNome());
			}
		}

		if (equipeDocentes.toString().trim().equals("")) {
			return "";
		}

		String result = equipeDocentes.toString().replaceFirst("[, ]", "");
		int pos = result.lastIndexOf(',');

		if (pos > 0) {
			return result.substring(0, pos) + " e" + result.substring(pos + 1);
		} else {
			return result == null ? "" : result;
		}

	}

	@Override
	public boolean equals(Object obj) {
		return EqualsUtil.testEquals(this, obj, "id");
	}

	/**
	 * retorna total de membros da comissão avaliando a resumos sid (com
	 * avaliações ativas)
	 * 
	 * @return
	 */
	@Transient
	public int getTotalAvaliadoresResumoSidAtivos() {
		int result = 0;
		for (AvaliacaoMonitoria a : avaliacoes) {
			if ((a.getTipoAvaliacao().getId() == TipoAvaliacaoMonitoria.AVALIACAO_RESUMO_SID)
					&& (a.getStatusAvaliacao().getId() != StatusAvaliacao.AVALIACAO_CANCELADA)) {
				result++;
			}
		}
		return result;
	}
	
	public boolean isPermitidoVisualizarResumoSid() {		
		if(status!= null && status.getId() != StatusRelatorio.REMOVIDO)
			return true;
		return false;
	}

	@Override
	public int hashCode() {
		return super.hashCode();
	}

}