package br.ufrn.sigaa.ensino.tecnico.dominio;

// Generated 13/09/2006 08:49:22 by Hibernate Tools 3.1.0.beta5

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import br.ufrn.arq.dominio.RegistroEntrada;
import br.ufrn.arq.negocio.validacao.ListaMensagens;
import br.ufrn.arq.negocio.validacao.Validatable;
import br.ufrn.arq.seguranca.log.AtualizadoEm;
import br.ufrn.arq.seguranca.log.AtualizadoPor;
import br.ufrn.arq.seguranca.log.CriadoEm;
import br.ufrn.arq.seguranca.log.CriadoPor;
import br.ufrn.arq.util.EqualsUtil;
import br.ufrn.arq.util.HashCodeUtil;
import br.ufrn.arq.util.ValidatorUtil;
import br.ufrn.sigaa.ensino.dominio.ComponenteCurricular;
import br.ufrn.sigaa.ensino.dominio.Turno;
import br.ufrn.sigaa.ensino.dominio.UnidadeTempo;

/**
 * Representa o currículo de um curso técnico,
 * com seus módulos e disciplinas complementares
 * EstruturaCurricularTecnica generated by hbm2java
 */
@Entity
@Table(name = "estrutura_curricular_tecnica", schema = "tecnico", uniqueConstraints = {})
public class EstruturaCurricularTecnica implements Validatable {

	/** Chave primária */
	@Id @GeneratedValue(strategy=GenerationType.SEQUENCE)
	@Column(name = "id_estrutura_curricular", unique = true, nullable = false, insertable = true, updatable = true)
	private int id;

	/** Indica a Unidade de Tempo da Estrutura Curricular. */
	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "id_unidade_tempo", unique = false, nullable = true, insertable = true, updatable = true)
	private UnidadeTempo unidadeTempo = new UnidadeTempo();

	/** Indica o Turno no qual ocorrem as aulas da Estrutura Curricular. */
	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "id_turno", unique = false, nullable = true, insertable = true, updatable = true)
	private Turno turno = new Turno();

	/** Indica se a Estrutura Curricular está ativa ou não. */
	@Column(name = "ativa", unique = false, nullable = true, insertable = true, updatable = true)
	private boolean ativa;

	/** Indica o prazo máximo para conclusão do Currículo. */
	@Column(name = "prazo_max_conclusao", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer prazoMaxConclusao;

	/** Indica o prazo mínimo para conclusão do Currículo. */
	@Column(name = "prazo_min_conclusao", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer prazoMinConclusao;

	/** Indica o código da Estrutura Curricular. */
	@Column(name = "codigo", unique = false, nullable = false, insertable = true, updatable = true, length = 2)
	private String codigo;

	/** Indica o ano inicial de vigoração do Currículo. */
	@Column(name = "ano_entrada_vigor", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer anoEntradaVigor;

	/** Indica o período inicial de vigoração do Currículo. */
	@Column(name = "periodo_entrada_vigor", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer periodoEntradaVigor;

	/** Carga Horária mínima de componente eletivos na estrutura curricular. */
	@Column(name = "ch_optativas_minima", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer chOptativasMinima;

	/** Indica o Curso Técnico na qual a Estrutura Curricular está vinculada. */
	@ManyToOne(cascade = {}, fetch = FetchType.EAGER)
	@JoinColumn(name = "id_curso", unique = false, nullable = true, insertable = true, updatable = true)
	private CursoTecnico cursoTecnico = new CursoTecnico();

	/** Inicia todas as Disciplinas Complementares nas quais estão vinculadas a Estrutura Curricular. */
	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY, mappedBy = "estruturaCurricularTecnica")
	@OrderBy("disciplina ASC")
	private Set<DisciplinaComplementar> disciplinasComplementares = new HashSet<DisciplinaComplementar>(0);

	/** Indica o conjunto das Turmas de Entrada nessa Estrutura Curricular. */
	@OneToMany(cascade = { }, fetch = FetchType.LAZY, mappedBy = "estruturaCurricularTecnica")
	private Set<TurmaEntradaTecnico> turmasEntradaTecnico = new HashSet<TurmaEntradaTecnico>(0);

	/** Relacionamento entre o Módulo e a Estrutura Curricular. */
	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY, mappedBy = "estruturaCurricularTecnica")
	private Set<ModuloCurricular> modulosCurriculares = new HashSet<ModuloCurricular>(0);

	/** Total de CH Obrigatória */
	@Column(name = "ch_total_modulos")
	private Integer chTotalModulos = 0;
	
	/** Total de CH disciplinas complementares. */
	@Column(name = "ch_total_disciplinas_complementares")
	private Integer chTotalDisciplinasComplementares = 0;
	
	/** Data de cadastro da Estrutura Curricular. */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_cadastro")
	@CriadoEm
	private Date dataCadastro;
	
	/** Registro entrada do usuário que cadastrou. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_registro_cadastro")
	@CriadoPor
	private RegistroEntrada registroCadastro;
	
	/** Data da última atualização da Estrutura Curricular. */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_atualizacao")
	@AtualizadoEm
	private Date dataAtualizacao;
	
	/** Registro entrada do usuário que realizou a última atualização. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_registro_atualizacao")
	@AtualizadoPor
	private RegistroEntrada registroAtualizacao;
	
	// Constructors

	/** default constructor */
	public EstruturaCurricularTecnica() {
	}

	/** default minimal constructor */
	public EstruturaCurricularTecnica(int id) {
		this.id = id;
	}

	/** minimal constructor */
	public EstruturaCurricularTecnica(int idEstruturaCurricular, Turno turno,
			String codigo) {
		this.id = idEstruturaCurricular;
		this.turno = turno;
		this.codigo = codigo;
	}

	/** full constructor */
	public EstruturaCurricularTecnica(int idEstruturaCurricular,
			UnidadeTempo unidadeTempo, Turno turno,
			boolean ativa, Integer diasMaxConclusao, Integer prazoMinConclusao,
			Integer cargaHoraria, String codigo, Integer anoEntradaVigor,
			Integer periodoEntradaVigor,
			Set<DisciplinaComplementar> disciplinaCurriculars,
			Set<TurmaEntradaTecnico> turmaEntradaTecnicos, Set<Modulo> modulos,
			Set<DiscenteTecnico> discenteTecnicos) {
		this.id = idEstruturaCurricular;
		this.unidadeTempo = unidadeTempo;
		this.turno = turno;
		this.ativa = ativa;
		this.prazoMaxConclusao = diasMaxConclusao;
		this.prazoMinConclusao = prazoMinConclusao;
		this.codigo = codigo;
		this.anoEntradaVigor = anoEntradaVigor;
		this.periodoEntradaVigor = periodoEntradaVigor;
		this.disciplinasComplementares = disciplinaCurriculars;
		this.turmasEntradaTecnico = turmaEntradaTecnicos;
	}

	
	public int getId() {
		return this.id;
	}

	public void setId(int idEstruturaCurricular) {
		this.id = idEstruturaCurricular;
	}

	public UnidadeTempo getUnidadeTempo() {
		return this.unidadeTempo;
	}

	public void setUnidadeTempo(UnidadeTempo unidadeTempo) {
		this.unidadeTempo = unidadeTempo;
	}

	public Turno getTurno() {
		return this.turno;
	}

	public void setTurno(Turno turno) {
		this.turno = turno;
	}

	public boolean isAtiva() {
		return this.ativa;
	}

	public void setAtiva(boolean ativa) {
		this.ativa = ativa;
	}

	public Integer getPrazoMaxConclusao() {
		return this.prazoMaxConclusao;
	}

	public void setPrazoMaxConclusao(Integer diasMaxConclusao) {
		this.prazoMaxConclusao = diasMaxConclusao;
	}

	public Integer getPrazoMinConclusao() {
		return this.prazoMinConclusao;
	}

	public void setPrazoMinConclusao(Integer prazoMinConclusao) {
		this.prazoMinConclusao = prazoMinConclusao;
	}

	public String getCodigo() {
		return this.codigo;
	}

	public void setCodigo(String codigo) {
		this.codigo = codigo;
	}

	public Integer getAnoEntradaVigor() {
		return this.anoEntradaVigor;
	}

	public void setAnoEntradaVigor(Integer anoEntradaVigor) {
		this.anoEntradaVigor = anoEntradaVigor;
	}

	public Integer getPeriodoEntradaVigor() {
		return this.periodoEntradaVigor;
	}

	public void setPeriodoEntradaVigor(Integer periodoEntradaVigor) {
		this.periodoEntradaVigor = periodoEntradaVigor;
	}
	
	public Integer getChOptativasMinima() {
		return chOptativasMinima;
	}

	public void setChOptativasMinima(Integer chOptativasMinima) {
		this.chOptativasMinima = chOptativasMinima;
	}

	public Set<DisciplinaComplementar> getDisciplinasComplementares() {
		return this.disciplinasComplementares;
	}
	
	public void setDisciplinasComplementares(
			Set<DisciplinaComplementar> disciplinaCurriculars) {
		this.disciplinasComplementares = disciplinaCurriculars;
	}

	public Set<TurmaEntradaTecnico> getTurmasEntradaTecnico() {
		return this.turmasEntradaTecnico;
	}

	public void setTurmasEntradaTecnico(
			Set<TurmaEntradaTecnico> turmaEntradaTecnicos) {
		this.turmasEntradaTecnico = turmaEntradaTecnicos;
	}

	public Set<ModuloCurricular> getModulosCurriculares() {
		return this.modulosCurriculares;
	}

	public void setModulosCurriculares(Set<ModuloCurricular> modulos) {
		this.modulosCurriculares = modulos;
	}

	public boolean addDisciplinaComplementar(DisciplinaComplementar obj) {
		obj.setEstruturaCurricularTecnica(this);
		chTotalDisciplinasComplementares += obj.getDisciplina().getChTotal();
		return disciplinasComplementares.add(obj);
	}

	public boolean removerDisciplinaComplementar(DisciplinaComplementar obj) {
		boolean removido = disciplinasComplementares.remove(obj);
		if (removido)
			chTotalDisciplinasComplementares -= obj.getDisciplina().getChTotal();
		
		return removido;
	}
	
	public boolean addModuloCurricular(ModuloCurricular obj) {
		obj.setEstruturaCurricularTecnica(this);
		chTotalModulos += obj.getModulo().getCargaHoraria();
		return modulosCurriculares.add(obj);
	}

	public boolean removerModuloCurricular(ModuloCurricular mc) {
		boolean removido = modulosCurriculares.remove(mc);
		if (removido)
			chTotalModulos -= mc.getModulo().getCargaHoraria();
		
		return removido;
	}	

	public CursoTecnico getCursoTecnico() {
		return cursoTecnico;
	}

	public void setCursoTecnico(CursoTecnico cursoTecnico) {
		this.cursoTecnico = cursoTecnico;
	}

	public Set<Modulo> getModulos() {
		Set<Modulo> modulos = new HashSet<Modulo>();
		for (ModuloCurricular mc : modulosCurriculares) {
			modulos.add(mc.getModulo());
		}
		return modulos;
	}

	public Set<ComponenteCurricular> getDisciplinas() {
		Set<ComponenteCurricular> disciplinas = new HashSet<ComponenteCurricular>();
		for (Modulo mod : getModulos()) {
			disciplinas.addAll(mod.getDisciplinas());
		}
		if (this.disciplinasComplementares != null) {
			for (DisciplinaComplementar dc : this.disciplinasComplementares) {
				disciplinas.add(dc.getDisciplina());
			}
		}
		return disciplinas;
	}

	public ListaMensagens validaMensagens(Collection<ModuloCurricular> modulosCurriculares, ModuloCurricular moduloCurricular){
		ListaMensagens lista = new ListaMensagens();
		return lista; 
	}
	
	@Override
	public boolean equals(Object obj) {
		return EqualsUtil.testEquals(this, obj, "id", "cursoTecnico", "ativa");
	}

	@Override
	public int hashCode() {
		return HashCodeUtil.hashAll(id, cursoTecnico, ativa);
	}
	
	public String getDescricao() {
		return getCursoTecnico().getCodigoNome() + " ["+codigo.trim()+" - "+getAnoPeriodoEntradaVigor()+"]";
	}
	
	public String getDescricaoResumida() {
		return codigo.trim()+" - "+getAnoPeriodoEntradaVigor();
	}

	public String getAnoPeriodoEntradaVigor(){
		return anoEntradaVigor+"."+periodoEntradaVigor;
	}
	
	public Integer getChTotalModulos() {
		return chTotalModulos;
	}

	public void setChTotalModulos(Integer chTotalModulos) {
		this.chTotalModulos = chTotalModulos;
	}
	
	public String getDescricaoEstruturaCursoTecnico(){
		return cursoTecnico.getNomeCompleto() + " " + codigo;
	}
	
	public Integer getChTotalDisciplinasComplementares() {
		return chTotalDisciplinasComplementares;
	}

	public void setChTotalDisciplinasComplementares(Integer chTotalDisciplinas) {
		this.chTotalDisciplinasComplementares = chTotalDisciplinas;
	}

	public Date getDataCadastro() {
		return dataCadastro;
	}

	public void setDataCadastro(Date dataCadastro) {
		this.dataCadastro = dataCadastro;
	}

	public RegistroEntrada getRegistroCadastro() {
		return registroCadastro;
	}

	public void setRegistroCadastro(RegistroEntrada registroCadastro) {
		this.registroCadastro = registroCadastro;
	}

	public Date getDataAtualizacao() {
		return dataAtualizacao;
	}

	public void setDataAtualizacao(Date dataAtualizacao) {
		this.dataAtualizacao = dataAtualizacao;
	}

	public RegistroEntrada getRegistroAtualizacao() {
		return registroAtualizacao;
	}

	public void setRegistroAtualizacao(RegistroEntrada registroAtualizacao) {
		this.registroAtualizacao = registroAtualizacao;
	}

	@Override
	public ListaMensagens validate() {
		ListaMensagens lista = new ListaMensagens();
		ValidatorUtil.validateRequired(codigo, "Código da Estrutura", lista);
		ValidatorUtil.validateRequired(cursoTecnico, "Curso", lista);
		ValidatorUtil.validateRequired(anoEntradaVigor, "Ano de Entrada em Vigor", lista);
		ValidatorUtil.validateRequired(periodoEntradaVigor, "Período de Entrada em Vigor", lista);
		ValidatorUtil.validateRequiredId(unidadeTempo.getId(), "Prazo de Conclusão", lista);
		ValidatorUtil.validateRequired(prazoMinConclusao, "Mínimo", lista);
		ValidatorUtil.validateRequired(prazoMaxConclusao, "Máximo", lista);
		
		ValidatorUtil.validateRange(prazoMinConclusao, 1, prazoMaxConclusao, "Mínimo", lista);
		return lista;
	}
	
}