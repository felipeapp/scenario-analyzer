package br.ufrn.sigaa.ensino.tecnico.dominio;

// Generated 13/09/2006 08:49:22 by Hibernate Tools 3.1.0.beta5

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;

import br.ufrn.arq.dao.CampoAtivo;
import br.ufrn.arq.dominio.RegistroEntrada;
import br.ufrn.arq.negocio.validacao.ListaMensagens;
import br.ufrn.arq.negocio.validacao.Validatable;
import br.ufrn.arq.seguranca.log.AtualizadoEm;
import br.ufrn.arq.seguranca.log.AtualizadoPor;
import br.ufrn.arq.seguranca.log.CriadoEm;
import br.ufrn.arq.seguranca.log.CriadoPor;
import br.ufrn.arq.util.EqualsUtil;
import br.ufrn.arq.util.HashCodeUtil;
import br.ufrn.arq.util.ValidatorUtil;
import br.ufrn.sigaa.dominio.Unidade;

/**
 * Conjunto de alunos que entram na escola no mesmo período, e devem cursar as
 * mesmas turmas durante todo curso. obs: também usado para nível médio
 * TurmaEntradaTecnico generated by hbm2java
 */
@Entity
@Table(name = "turma_entrada_tecnico", schema = "tecnico", uniqueConstraints = {})
public class TurmaEntradaTecnico implements Validatable, Comparable<TurmaEntradaTecnico>  {

	/** Chave primária. */
	@Id
	@GeneratedValue(generator="seqGenerator")
	@GenericGenerator(name="seqGenerator", strategy="br.ufrn.arq.dao.SequenceStyleGenerator")
	@Column(name = "id_turma_entrada", unique = true, nullable = false, insertable = true, updatable = true)
	private int id;

	/** Indica a Estrutura Curricular vinculada a Turma de Entrada. */
	@ManyToOne(cascade = {}, fetch = FetchType.LAZY)
	@JoinColumn(name = "id_estrutura_curricular", unique = false, nullable = false, insertable = true, updatable = true)
	private EstruturaCurricularTecnica estruturaCurricularTecnica = new EstruturaCurricularTecnica();

	/** Indica a data da entrada da Turma no Curso. */
	@Temporal(TemporalType.DATE)
	@Column(name = "data_entrada", unique = false, nullable = true, insertable = true, updatable = true, length = 4)
	private Date dataEntrada;

	/** Indica o ano de referência da Turma de Entrada. */
	@Column(name = "ano_referencia", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer anoReferencia;

	/** Indica o período de referência (1 ou 2) da Turma de Entrada. */
	@Column(name = "periodo_referencia", unique = false, nullable = true, insertable = true, updatable = true)
	private Integer periodoReferencia;

	/** Indica a Unidade vinculada a Turma de Entrada. */
	@ManyToOne(cascade = {}, fetch = FetchType.LAZY)
	@JoinColumn(name = "id_unidade", unique = false, nullable = true, insertable = true, updatable = true)
	private Unidade unidade = new Unidade();

	/** Indica, se houver, a Especializacao da Turma de Entrada. */
	@ManyToOne(cascade = {}, fetch = FetchType.LAZY)
	@JoinColumn(name="id_especializacao_turma_entrada")
	private EspecializacaoTurmaEntrada especializacao = new EspecializacaoTurmaEntrada();

	/** Indica os Discentes que ingressaram na Turma de Entrada. */
	@OneToMany(cascade = {}, fetch = FetchType.LAZY, mappedBy = "turmaEntradaTecnico")
	private Set<DiscenteTecnico> discentesTecnicos = new HashSet<DiscenteTecnico>(0);
	
	@ManyToOne
	@JoinColumn(name="id_opcao_polo_grupo")
	private OpcaoPoloGrupo opcaoPoloGrupo;

	/** Verifica se a Turma de Entrada está ativa */
	@CampoAtivo
	private boolean ativo = true;
	
	/** Capacidade da Turma de Entrada */
	private Integer capacidade;
	
	/** Data de cadastro da Turma de Entrada. */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_cadastro")
	@CriadoEm
	private Date dataCadastro;

	/** Registro entrada do usuário que cadastrou. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_registro_cadastro")
	@CriadoPor
	private RegistroEntrada registroCadastro;

	/** Data da última atualização da Turma de Entrada. */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="data_atualizacao")
	@AtualizadoEm
	private Date dataAtualizacao;

	/** Registro entrada do usuário que realizou a última atualização. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_registro_atualizacao")
	@AtualizadoPor
	private RegistroEntrada registroAtualizacao;
	
	// Constructors

	/** default constructor */
	public TurmaEntradaTecnico() {
	}

	/** default minimal constructor */
	public TurmaEntradaTecnico(int id) {
		this.id = id;
	}

	/** minimal constructor */
	public TurmaEntradaTecnico(int idTurmaEntrada, EstruturaCurricularTecnica estruturaCurricularTecnica) {
		this.id = idTurmaEntrada;
		this.estruturaCurricularTecnica = estruturaCurricularTecnica;
	}

	/** full constructor */
	public TurmaEntradaTecnico(int idTurmaEntrada, Unidade unidade,
			EstruturaCurricularTecnica estruturaCurricularTecnica, Date dataEntrada, Integer anoReferencia,
			Integer periodoReferencia, Set<DiscenteTecnico> discenteTecnicos) {
		this.id = idTurmaEntrada;
		this.estruturaCurricularTecnica = estruturaCurricularTecnica;
		this.dataEntrada = dataEntrada;
		this.anoReferencia = anoReferencia;
		this.periodoReferencia = periodoReferencia;
		this.discentesTecnicos = discenteTecnicos;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int idTurmaEntrada) {
		this.id = idTurmaEntrada;
	}

	public EstruturaCurricularTecnica getEstruturaCurricularTecnica() {
		return this.estruturaCurricularTecnica;
	}

	public void setEstruturaCurricularTecnica(EstruturaCurricularTecnica estruturaCurricularTecnica) {
		this.estruturaCurricularTecnica = estruturaCurricularTecnica;
	}

	public Date getDataEntrada() {
		return this.dataEntrada;
	}

	public void setDataEntrada(Date dataEntrada) {
		this.dataEntrada = dataEntrada;
	}

	public Integer getAnoReferencia() {
		return this.anoReferencia;
	}

	public void setAnoReferencia(Integer anoReferencia) {
		this.anoReferencia = anoReferencia;
	}

	public Integer getPeriodoReferencia() {
		return this.periodoReferencia;
	}

	public void setPeriodoReferencia(Integer periodoReferencia) {
		this.periodoReferencia = periodoReferencia;
	}

	public Set<DiscenteTecnico> getDiscentesTecnicos() {
		return this.discentesTecnicos;
	}

	public void setDiscentesTecnicos(Set<DiscenteTecnico> discenteTecnicos) {
		this.discentesTecnicos = discenteTecnicos;
	}

	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}

	public CursoTecnico getCursoTecnico() {
		return getEstruturaCurricularTecnica().getCursoTecnico();
	}

	public String getDescricao() {
		return getCursoTecnico().getCodigoNome()+ " (" + getAnoPeriodo() + ")"
			+ ((especializacao != null)?" - "+especializacao.getDescricao():"");
	}

	public String getDescricaoResumida() {
		return getCursoTecnico().getNome()+ " (" + getAnoPeriodo() + ")"
			+ ((especializacao != null)?" - " + especializacao.getDescricao():"");
	}
	
	@Override
	public boolean equals(Object obj) {
		return EqualsUtil.testEquals(this, obj, "id");
	}

	@Override
	public int hashCode() {
		return HashCodeUtil.hashAll(id);
	}

	public ListaMensagens validate() {

		ListaMensagens lista = new ListaMensagens();
		ValidatorUtil.validateRequired(getCursoTecnico(), "Curso", lista);
		ValidatorUtil.validateRequired(estruturaCurricularTecnica, "Currículo", lista);
		ValidatorUtil.validateRequired(dataEntrada, "Data de Entrada", lista);
		ValidatorUtil.validaInt(getAnoReferencia(), "Ano de Referência", lista);
		ValidatorUtil.validaInt(getPeriodoReferencia(), "Período de Referência", lista);

		return lista;
	}

	public String getAnoPeriodo() {
		return anoReferencia + "." + periodoReferencia;
	}

	public EspecializacaoTurmaEntrada getEspecializacao() {
		return especializacao;
	}

	public void setEspecializacao(EspecializacaoTurmaEntrada especializacao) {
		this.especializacao = especializacao;
	}

	/** Verifica se o anoperiodo é igual. */
	public int compareTo(TurmaEntradaTecnico outro) {
		Integer anoPeriodo = new Integer(anoReferencia+periodoReferencia);
		if (especializacao != null && outro.getEspecializacao() != null &&  
				anoPeriodo.compareTo(outro.getAnoReferencia()+outro.getPeriodoReferencia()) == 0) {
			return especializacao.getDescricao().compareTo(outro.getEspecializacao().getDescricao());
		}
			
		return anoPeriodo.compareTo(outro.getAnoReferencia()+outro.getPeriodoReferencia());
			
	}

	public boolean isAtivo() {
		return ativo;
	}

	public void setAtivo(boolean ativo) {
		this.ativo = ativo;
	}

	public Integer getCapacidade() {
		return capacidade;
	}

	public void setCapacidade(Integer capacidade) {
		this.capacidade = capacidade;
	}

	public OpcaoPoloGrupo getOpcaoPoloGrupo() {
		return opcaoPoloGrupo;
	}

	public void setOpcaoPoloGrupo(OpcaoPoloGrupo opcaoPoloGrupo) {
		this.opcaoPoloGrupo = opcaoPoloGrupo;
	}

	public Date getDataCadastro() {
		return dataCadastro;
	}

	public void setDataCadastro(Date dataCadastro) {
		this.dataCadastro = dataCadastro;
	}

	public RegistroEntrada getRegistroCadastro() {
		return registroCadastro;
	}

	public void setRegistroCadastro(RegistroEntrada registroCadastro) {
		this.registroCadastro = registroCadastro;
	}

	public Date getDataAtualizacao() {
		return dataAtualizacao;
	}

	public void setDataAtualizacao(Date dataAtualizacao) {
		this.dataAtualizacao = dataAtualizacao;
	}

	public RegistroEntrada getRegistroAtualizacao() {
		return registroAtualizacao;
	}

	public void setRegistroAtualizacao(RegistroEntrada registroAtualizacao) {
		this.registroAtualizacao = registroAtualizacao;
	}

}