# Métodos que tiveram performance inalterada na evolução
288
io.netty.testsuite.transport.AbstractTestsuiteTest.newAllocators()
io.netty.testsuite.util.BogusKeyStore.asInputStream()
io.netty.channel.DefaultChannelHandlerContext$10(io.netty.channel.DefaultChannelHandlerContext,io.netty.channel.DefaultChannelHandlerContext)
io.netty.testsuite.util.BogusKeyStore.getCertificatePassword()
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest.connection()
io.netty.buffer.AbstractByteBuf.writeMedium(int)
io.netty.buffer.AbstractByteBufAllocator.validate(int,int)
io.netty.testsuite.transport.socket.SocketEchoTest$1(io.netty.testsuite.transport.socket.SocketEchoTest.EchoHandler)
io.netty.channel.AdaptiveRecvByteBufAllocator()
io.netty.testsuite.transport.socket.DatagramUnicastTest$3(io.netty.testsuite.transport.socket.DatagramUnicastTest,java.util.concurrent.CountDownLatch)
io.netty.channel.ChannelInitializer()
io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe(io.netty.channel.oio.AbstractOioChannel,io.netty.channel.oio.AbstractOioChannel.DefaultOioUnsafe)
io.netty.testsuite.util.BogusKeyStore.getKeyStorePassword()
io.netty.buffer.UnpooledHeapByteBuf._setShort(int,int)
io.netty.bootstrap.AbstractBootstrap.localAddress()
io.netty.testsuite.transport.socket.DatagramMulticastTest$1(io.netty.testsuite.transport.socket.DatagramMulticastTest)
io.netty.bootstrap.ServerBootstrap.newAttrArray(int)
io.netty.buffer.PoolChunk.subpageIdx(int)
io.netty.channel.socket.DefaultDatagramChannelConfig(io.netty.channel.socket.DatagramChannel,java.net.DatagramSocket)
io.netty.channel.AbstractChannel.localAddress()
io.netty.testsuite.transport.socket.DatagramMulticastTest.testMulticast(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.Bootstrap)
io.netty.channel.DefaultChannelPipeline.writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)
io.netty.channel.socket.oio.OioServerSocketChannel.config()
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig.setOption(io.netty.channel.ChannelOption,java.lang.Object)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client.waitForActive(boolean)
io.netty.buffer.PooledUnsafeDirectByteBuf.recycler()
io.netty.channel.DefaultChannelHandlerContext$14(io.netty.channel.DefaultChannelHandlerContext,io.netty.channel.DefaultChannelHandlerContext,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.SocketSslEchoTest$1(io.netty.testsuite.transport.socket.SocketSslEchoTest,javax.net.ssl.SSLEngine,java.util.concurrent.ExecutorService,io.netty.testsuite.transport.socket.SocketSslEchoTest.EchoHandler)
io.netty.buffer.UnpooledUnsafeDirectByteBuf.freeDirect(java.nio.ByteBuffer)
io.netty.channel.socket.oio.OioDatagramChannel.config()
io.netty.bootstrap.AbstractBootstrap$BootstrapChannelFactory(java.lang.Class)
io.netty.channel.DefaultChannelPipeline$TailHandler()
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler.handlerAdded(io.netty.channel.ChannelHandlerContext)
io.netty.bootstrap.AbstractBootstrap$2(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.channel.socket.nio.ProtocolFamilyConverter.$SWITCH_TABLE$io$netty$channel$socket$InternetProtocolFamily()
io.netty.channel.socket.DefaultDatagramChannelConfig.setActiveOnOpen(boolean)
io.netty.channel.socket.nio.ProtocolFamilyConverter.convert(io.netty.channel.socket.InternetProtocolFamily)
io.netty.buffer.PooledByteBufAllocator(boolean)
io.netty.testsuite.transport.socket.DatagramUnicastTest$1(io.netty.testsuite.transport.socket.DatagramUnicastTest,java.util.concurrent.CountDownLatch)
io.netty.channel.DefaultChannelPromise.setSuccess()
io.netty.bootstrap.ServerBootstrap$1(io.netty.bootstrap.ServerBootstrap,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelHandler,java.util.Map.Entry[],java.util.Map.Entry[])
io.netty.channel.ChannelHandlerAdapter()
io.netty.channel.DefaultChannelHandlerContext.channel()
io.netty.channel.socket.oio.OioDatagramChannel.joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.testsuite.util.TestUtils.testMethodName(org.junit.rules.TestName)
io.netty.channel.nio.NioEventLoopGroup.newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])
io.netty.channel.nio.NioEventLoop(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
io.netty.channel.ChannelMetadata(boolean)
io.netty.bootstrap.ServerBootstrap.newOptionArray(int)
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler()
io.netty.testsuite.transport.socket.DatagramUnicastTest.testSimpleSendWithoutBind()
io.netty.channel.socket.nio.NioServerSocketChannel.config()
io.netty.channel.socket.oio.OioSocketChannel.shutdownOutput()
io.netty.channel.socket.oio.OioSocketChannel.isOpen()
io.netty.channel.ChannelInboundHandlerAdapter()
io.netty.channel.DefaultAddressedEnvelope(java.lang.Object,java.net.SocketAddress)
io.netty.handler.ssl.SslHandler$LazyChannelPromise(io.netty.handler.ssl.SslHandler,io.netty.handler.ssl.SslHandler.LazyChannelPromise)
io.netty.testsuite.transport.socket.SocketTestPermutation$3.newInstance()
io.netty.channel.DefaultMessageSizeEstimator$HandleImpl(int,io.netty.channel.DefaultMessageSizeEstimator.HandleImpl)
io.netty.testsuite.transport.socket.SocketEchoTest$2(io.netty.testsuite.transport.socket.SocketEchoTest.EchoHandler)
io.netty.channel.ThreadPerChannelEventLoop(io.netty.channel.ThreadPerChannelEventLoopGroup)
io.netty.buffer.AbstractByteBuf.ensureAccessible()
io.netty.testsuite.transport.socket.SocketTestPermutation$8()
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest.testShutdownOutput(io.netty.bootstrap.Bootstrap)
io.netty.channel.socket.oio.OioSocketChannel.isActive()
io.netty.channel.SingleThreadEventLoop(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)
io.netty.channel.ChannelHandlerAdapter.handlerAdded(io.netty.channel.ChannelHandlerContext)
io.netty.channel.AbstractChannel$AbstractUnsafe.localAddress()
io.netty.channel.socket.nio.NioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.channel.DefaultAddressedEnvelope.content()
io.netty.testsuite.transport.socket.DatagramMulticastTest$MulticastTestHandler(io.netty.testsuite.transport.socket.DatagramMulticastTest.MulticastTestHandler)
io.netty.channel.socket.oio.OioServerSocketChannel.localAddress0()
io.netty.channel.socket.oio.OioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)
io.netty.channel.DefaultChannelConfig.setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
io.netty.bootstrap.ServerBootstrap()
io.netty.channel.socket.DatagramPacket(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)
io.netty.channel.group.DefaultChannelGroup(java.lang.String,io.netty.util.concurrent.EventExecutor)
io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe(io.netty.channel.nio.AbstractNioMessageChannel)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server.shutdown()
io.netty.channel.group.CombinedIterator(java.util.Iterator,java.util.Iterator)
io.netty.testsuite.transport.socket.SocketBufReleaseTest.access$0()
io.netty.testsuite.transport.socket.AbstractDatagramTest.configure(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.Bootstrap,io.netty.buffer.ByteBufAllocator)
io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest$TestHandler()
io.netty.handler.ssl.SslHandler(javax.net.ssl.SSLEngine,boolean)
io.netty.channel.socket.oio.OioServerSocketChannel.newServerSocket()
io.netty.channel.ChannelOption(java.lang.String)
io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)
io.netty.channel.socket.DefaultDatagramChannelConfig.setReuseAddress(boolean)
io.netty.channel.group.DefaultChannelGroup$1(io.netty.channel.group.DefaultChannelGroup)
io.netty.channel.socket.DefaultDatagramChannelConfig.getOption(io.netty.channel.ChannelOption)
io.netty.channel.nio.SelectedSelectionKeySet()
io.netty.channel.oio.AbstractOioChannel$1(io.netty.channel.oio.AbstractOioChannel)
io.netty.channel.socket.nio.NioDatagramChannel.javaChannel()
io.netty.bootstrap.AbstractBootstrap.channelFactory()
io.netty.channel.socket.nio.NioSocketChannel.isInputShutdown()
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest.testShutdownOutput()
io.netty.channel.socket.InternetProtocolFamily.values()
io.netty.channel.ThreadPerChannelEventLoop$1(io.netty.channel.ThreadPerChannelEventLoop)
io.netty.bootstrap.Bootstrap.connect(java.net.SocketAddress)
io.netty.channel.nio.AbstractNioChannel.isInputShutdown()
io.netty.buffer.AbstractByteBuf.writerIndex()
io.netty.testsuite.transport.socket.SocketTestPermutation.access$0()
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig.setConnectTimeoutMillis(int)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client(java.lang.String,int)
io.netty.channel.socket.nio.NioDatagramChannel.config()
io.netty.channel.socket.nio.NioServerSocketChannel.localAddress0()
io.netty.testsuite.util.BogusTrustManagerFactory$1()
io.netty.channel.ChannelOutboundBuffer$1()
io.netty.buffer.UnpooledUnsafeDirectByteBuf.deallocate()
io.netty.channel.socket.DefaultServerSocketChannelConfig(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client.shutdown()
io.netty.testsuite.transport.socket.SocketTestPermutation.access$1()
io.netty.channel.AbstractChannel$AbstractUnsafe$1(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise)
io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe(io.netty.channel.nio.AbstractNioMessageChannel,io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe)
io.netty.handler.codec.ByteToMessageDecoder()
io.netty.channel.socket.oio.OioSocketChannel$1(io.netty.channel.socket.oio.OioSocketChannel,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server.waitForActive(boolean)
io.netty.buffer.PooledByteBufAllocator$1(io.netty.buffer.PooledByteBufAllocator)
io.netty.channel.SingleThreadEventLoop.register(io.netty.channel.Channel)
io.netty.channel.oio.AbstractOioChannel.isCompatible(io.netty.channel.EventLoop)
io.netty.channel.MultithreadEventLoopGroup.register(io.netty.channel.Channel)
io.netty.buffer.UnpooledHeapByteBuf.alloc()
io.netty.bootstrap.AbstractBootstrap$1(io.netty.bootstrap.AbstractBootstrap,io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest.testConnectCancellation()
io.netty.channel.DefaultChannelPromise.setSuccess(java.lang.Void)
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig.setAllocator(io.netty.buffer.ByteBufAllocator)
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest.testConnectCancellation(io.netty.bootstrap.Bootstrap)
io.netty.channel.socket.oio.OioServerSocketChannel()
io.netty.channel.oio.OioEventLoopGroup(int,java.util.concurrent.ThreadFactory)
io.netty.channel.socket.oio.OioDatagramChannel()
io.netty.buffer.UnpooledByteBufAllocator(boolean)
io.netty.buffer.EmptyByteBuf(io.netty.buffer.ByteBufAllocator)
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest.testConnectTimeout()
io.netty.channel.socket.oio.OioSocketChannel.isInputShutdown()
io.netty.channel.socket.nio.NioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)
io.netty.channel.socket.oio.OioSocketChannel.shutdownOutput(io.netty.channel.ChannelPromise)
io.netty.bootstrap.AbstractBootstrap.localAddress(java.net.SocketAddress)
io.netty.channel.group.DefaultChannelGroup.iterator()
io.netty.channel.socket.nio.NioServerSocketChannel.javaChannel()
io.netty.bootstrap.AbstractBootstrap.validate()
io.netty.channel.DefaultChannelPipeline.context(java.lang.Class)
io.netty.channel.SucceededChannelFuture(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe(io.netty.channel.nio.AbstractNioChannel)
io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest$TestHandler()
io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest$TestHandler(io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest.TestHandler)
io.netty.buffer.PoolChunkList(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int)
io.netty.channel.DefaultChannelHandlerContext.writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)
io.netty.channel.DefaultChannelPipeline.get(java.lang.Class)
io.netty.testsuite.util.TestUtils.getFreePort()
io.netty.channel.socket.nio.NioSocketChannel$1(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.DatagramUnicastTest.testSimpleSend()
io.netty.handler.ssl.SslHandler$LazyChannelPromise(io.netty.handler.ssl.SslHandler)
io.netty.buffer.PoolSubpage.free(int)
io.netty.channel.DefaultChannelPipeline$HeadHandler(io.netty.channel.Channel.Unsafe)
io.netty.channel.nio.AbstractNioByteChannel(io.netty.channel.Channel,java.nio.channels.SelectableChannel)
io.netty.bootstrap.Bootstrap.remoteAddress(java.net.SocketAddress)
io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest$TestHandler(io.netty.testsuite.transport.socket.SocketShutdownOutputByPeerTest.TestHandler)
io.netty.buffer.UnpooledHeapByteBuf(io.netty.buffer.ByteBufAllocator,int,int)
io.netty.bootstrap.Bootstrap$2(io.netty.channel.ChannelFuture,java.net.SocketAddress,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.testsuite.transport.socket.AbstractServerSocketTest.newFactories()
io.netty.channel.VoidChannelPromise(io.netty.channel.Channel,boolean)
io.netty.testsuite.transport.socket.DatagramUnicastTest.testSimpleSend(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.Bootstrap)
io.netty.channel.socket.nio.NioSocketChannel(java.nio.channels.SocketChannel)
io.netty.channel.socket.DefaultDatagramChannelConfig.setAllocator(io.netty.buffer.ByteBufAllocator)
io.netty.buffer.SlicedByteBuf.capacity()
io.netty.buffer.PoolChunk.usage()
io.netty.bootstrap.AbstractBootstrap.group(io.netty.channel.EventLoopGroup)
io.netty.channel.nio.NioEventLoopGroup(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
io.netty.channel.socket.oio.OioSocketChannel(java.net.Socket)
io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest$TestHandler(io.netty.testsuite.transport.socket.SocketShutdownOutputBySelfTest.TestHandler)
io.netty.buffer.AbstractByteBuf.writeShort(int)
io.netty.channel.AbstractChannel.writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)
io.netty.bootstrap.ServerBootstrap.validate()
io.netty.buffer.AbstractByteBufAllocator.directBuffer(int,int)
io.netty.buffer.SlicedByteBuf.unwrap()
io.netty.channel.socket.nio.NioSocketChannel.isOutputShutdown()
io.netty.buffer.AbstractByteBuf.maxCapacity()
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig(io.netty.channel.socket.SocketChannel,java.net.Socket)
io.netty.channel.group.CombinedIterator.next()
io.netty.channel.ChannelOutboundBuffer(io.netty.util.Recycler.Handle,io.netty.channel.ChannelOutboundBuffer)
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe(io.netty.channel.nio.AbstractNioByteChannel,io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server(java.lang.String,int)
io.netty.channel.DefaultChannelHandlerContext$WriteTask$1()
io.netty.testsuite.transport.socket.SocketTestPermutation.access$2()
io.netty.channel.ChannelOption.validate(java.lang.Object)
io.netty.bootstrap.Bootstrap.connect(java.lang.String,int)
io.netty.channel.MultithreadEventLoopGroup(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
io.netty.channel.socket.nio.NioDatagramChannelConfig(io.netty.channel.socket.nio.NioDatagramChannel,java.nio.channels.DatagramChannel)
io.netty.channel.group.DefaultChannelGroup.isEmpty()
io.netty.channel.DefaultChannelHandlerContext.findContextInbound()
io.netty.testsuite.util.BogusSslContextFactory.getClientContext()
io.netty.buffer.PoolChunk.free(long)
io.netty.testsuite.transport.socket.DatagramUnicastTest$2(io.netty.testsuite.transport.socket.DatagramUnicastTest)
io.netty.buffer.CompositeByteBuf.consolidateIfNeeded()
io.netty.bootstrap.AbstractBootstrap.options()
io.netty.channel.socket.nio.NioDatagramChannel(io.netty.channel.socket.InternetProtocolFamily)
io.netty.channel.socket.oio.OioDatagramChannel.isActive()
io.netty.buffer.PooledByteBufAllocator.newArenaArray(int)
io.netty.channel.socket.oio.OioSocketChannel()
io.netty.channel.oio.OioByteStreamChannel$2()
io.netty.bootstrap.AbstractBootstrap.channelFactory(io.netty.bootstrap.ChannelFactory)
io.netty.testsuite.transport.socket.SocketTestPermutation$3()
io.netty.testsuite.transport.socket.SocketTestPermutation$2()
io.netty.testsuite.transport.socket.SocketTestPermutation$4(io.netty.testsuite.transport.TestsuitePermutation.BootstrapFactory,io.netty.testsuite.transport.TestsuitePermutation.BootstrapFactory)
io.netty.channel.socket.DefaultServerSocketChannelConfig.setAllocator(io.netty.buffer.ByteBufAllocator)
io.netty.testsuite.transport.socket.SocketTestPermutation$6()
io.netty.channel.oio.OioByteStreamChannel(io.netty.channel.Channel)
io.netty.channel.DefaultMessageSizeEstimator.newHandle()
io.netty.buffer.PooledByteBufAllocator.validateAndCalculateChunkSize(int,int)
io.netty.handler.ssl.SslHandler.handshakeFuture()
io.netty.channel.DefaultChannelPromise.awaitUninterruptibly()
io.netty.testsuite.util.BogusSslContextFactory.getServerContext()
io.netty.channel.CompleteChannelFuture(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
io.netty.channel.nio.NioEventLoopGroup(int,java.util.concurrent.ThreadFactory)
io.netty.channel.socket.oio.OioSocketChannel.isOutputShutdown()
io.netty.testsuite.transport.socket.DatagramUnicastTest$4(io.netty.testsuite.transport.socket.DatagramUnicastTest)
io.netty.testsuite.transport.socket.DatagramUnicastTest.testSimpleSendWithoutBind(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.Bootstrap)
io.netty.bootstrap.AbstractBootstrap.handler()
io.netty.channel.socket.oio.OioDatagramChannel.isOpen()
io.netty.bootstrap.Bootstrap.remoteAddress(java.net.InetAddress,int)
io.netty.testsuite.transport.socket.AbstractServerSocketTest.configure(io.netty.bootstrap.ServerBootstrap,io.netty.buffer.ByteBufAllocator)
io.netty.channel.socket.nio.NioDatagramChannel.leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)
io.netty.buffer.PoolArena$DirectArena(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
io.netty.buffer.PoolChunkList.free(io.netty.buffer.PoolChunk,long)
io.netty.channel.socket.InternetProtocolFamily(java.lang.String,int)
io.netty.testsuite.util.BogusTrustManagerFactory.getTrustManagers()
io.netty.testsuite.transport.socket.SocketSpdyEchoTest.$SWITCH_TABLE$io$netty$handler$codec$spdy$SpdyVersion()
io.netty.handler.ssl.SslHandler(javax.net.ssl.SSLEngine)
io.netty.buffer.Unpooled.copyInt(int)
io.netty.channel.socket.oio.OioServerSocketChannel.localAddress()
io.netty.buffer.UnpooledHeapByteBuf._setInt(int,int)
io.netty.buffer.PoolArena.newSubpagePoolArray(int)
io.netty.channel.AbstractChannel.access$1(io.netty.channel.AbstractChannel,io.netty.channel.EventLoop)
io.netty.handler.codec.spdy.SpdyVersion.values()
io.netty.channel.ThreadPerChannelEventLoopGroup$1(io.netty.channel.ThreadPerChannelEventLoopGroup)
io.netty.buffer.EmptyByteBuf.readableBytes()
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler.access$2(io.netty.testsuite.transport.socket.SocketBufReleaseTest.BufWriterHandler)
io.netty.bootstrap.AbstractBootstrap.group()
io.netty.channel.socket.oio.OioDatagramChannel.ensureBound()
io.netty.testsuite.transport.socket.SocketBufReleaseTest$BufWriterHandler(io.netty.testsuite.transport.socket.SocketBufReleaseTest.BufWriterHandler)
io.netty.channel.socket.oio.OioDatagramChannel.leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)
io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe(io.netty.channel.oio.AbstractOioChannel)
io.netty.channel.nio.AbstractNioChannel.javaChannel()
io.netty.channel.oio.AbstractOioByteChannel(io.netty.channel.Channel)
io.netty.channel.FixedRecvByteBufAllocator$HandleImpl(int)
io.netty.channel.DefaultMessageSizeEstimator$HandleImpl(int)
io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest.testWriteBeforeConnect(io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.SocketStartTlsTest$1(io.netty.testsuite.transport.socket.SocketStartTlsTest,io.netty.util.concurrent.EventExecutorGroup,io.netty.testsuite.transport.socket.SocketStartTlsTest.StartTlsServerHandler)
io.netty.testsuite.transport.socket.AbstractDatagramTest.newFactories()
io.netty.testsuite.transport.socket.SocketEchoTest$3()
io.netty.bootstrap.AbstractBootstrap.attrs()
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest$TestHandler()
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe(io.netty.channel.nio.AbstractNioByteChannel)
io.netty.channel.nio.NioEventLoop.openSelector()
io.netty.buffer.PoolArena$HeapArena(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
io.netty.bootstrap.ServerBootstrap.childHandler(io.netty.channel.ChannelHandler)
io.netty.testsuite.transport.socket.SocketSslEchoTest$2(io.netty.testsuite.transport.socket.SocketSslEchoTest,javax.net.ssl.SSLEngine,java.util.concurrent.ExecutorService,io.netty.testsuite.transport.socket.SocketSslEchoTest.EchoHandler)
io.netty.bootstrap.AbstractBootstrap.handler(io.netty.channel.ChannelHandler)
io.netty.channel.VoidChannelPromise.isDone()
io.netty.channel.oio.AbstractOioByteChannel.isInputShutdown()
io.netty.channel.DefaultChannelConfig.setConnectTimeoutMillis(int)
io.netty.bootstrap.Bootstrap$1(io.netty.bootstrap.Bootstrap,io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)
io.netty.buffer.WrappedByteBuf.refCnt()
io.netty.channel.socket.nio.NioSocketChannel()
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)
io.netty.handler.ssl.SslHandler.access$0(io.netty.handler.ssl.SslHandler)
io.netty.buffer.UnpooledHeapByteBuf._setMedium(int,int)
io.netty.testsuite.transport.socket.SocketTestPermutation.access$3()
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Server.waitForShutdown()
io.netty.channel.socket.oio.OioDatagramChannel.joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)
io.netty.testsuite.transport.udt.UDTClientServerConnectionTest$Client.waitForRunning(boolean)
io.netty.testsuite.transport.socket.SocketStartTlsTest$2(io.netty.testsuite.transport.socket.SocketStartTlsTest,io.netty.util.concurrent.EventExecutorGroup,io.netty.testsuite.transport.socket.SocketStartTlsTest.StartTlsClientHandler)
io.netty.channel.group.DefaultChannelGroup.size()
io.netty.channel.oio.OioByteStreamChannel$1()
io.netty.channel.ChannelException(java.lang.String)
io.netty.channel.socket.DefaultSocketChannelConfig.setConnectTimeoutMillis(int)
io.netty.bootstrap.Bootstrap()
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest$TestHandler(io.netty.testsuite.transport.socket.SocketConnectionAttemptTest.TestHandler)
io.netty.testsuite.transport.socket.SocketTestPermutation$5()
io.netty.buffer.PoolArena.free(io.netty.buffer.PoolChunk,long)
io.netty.testsuite.transport.socket.AbstractClientSocketTest.newFactories()
io.netty.testsuite.transport.socket.DatagramMulticastTest.testMulticast()
io.netty.testsuite.transport.socket.SocketConnectionAttemptTest.testConnectTimeout(io.netty.bootstrap.Bootstrap)
io.netty.testsuite.transport.socket.SocketTestPermutation$7()
io.netty.channel.DefaultFileRegion(java.nio.channels.FileChannel,long,long)
io.netty.testsuite.transport.socket.WriteBeforeRegisteredTest.testWriteBeforeConnect()
io.netty.channel.nio.AbstractNioChannel.isOpen()
io.netty.channel.DefaultChannelHandlerContext.handler()
0.05
